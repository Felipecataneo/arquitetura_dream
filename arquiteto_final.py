# ==============================================================================
#                 DREAM V13.2: SISTEMA AGI MULTI-LLM ROBUSTO
#        Sistema Unificado com Ollama + OpenAI - Vers√£o Robusta Completa
# ==============================================================================

import json
import logging
import re
import time
import ast
import subprocess
import tempfile
import os
from pathlib import Path
from dataclasses import dataclass, field
from enum import Enum
from typing import Any, Dict, List, Optional, Tuple, Set, Union
from collections import defaultdict
import traceback
import hashlib
from abc import ABC, abstractmethod

# --- CONFIGURA√á√ÉO ROBUSTA V13.2 ---
try:
    import ollama
    OLLAMA_AVAILABLE = True
except ImportError:
    OLLAMA_AVAILABLE = False
    logging.warning("Ollama n√£o dispon√≠vel. Funcionalidade limitada.")

try:
    import openai
    from openai import OpenAI
    OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
    OPENAI_AVAILABLE = bool(OPENAI_API_KEY)
    if not OPENAI_API_KEY:
        logging.warning("OPENAI_API_KEY n√£o encontrada. OpenAI indispon√≠vel.")
except ImportError:
    OPENAI_AVAILABLE = False
    logging.warning("OpenAI n√£o instalado. Use: pip install openai")

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# --- SISTEMA DE VALIDA√á√ÉO APRIMORADO (COMPLETO) ---
class ValidationError(Exception):
    """Erro de valida√ß√£o customizado robusto"""
    pass

class ResponseValidator:
    @staticmethod
    def validate_json_response(response_text: str, required_fields: List[str] = None) -> Dict:
        """Valida√ß√£o robusta de JSON com fallbacks m√∫ltiplos"""
        if not response_text:
            raise ValidationError("Resposta vazia recebida")
        
        # Padr√µes de extra√ß√£o JSON expandidos
        json_patterns = [
            r'```json\s*(\{.*?\})\s*```',  # JSON em code block
            r'```\s*(\{.*?\})\s*```',      # JSON sem especifica√ß√£o
            r'(\{[^{}]*(?:\{[^{}]*\}[^{}]*)*\})',  # JSON aninhado
            r'(\{.*\})',  # JSON direto
        ]
        
        extracted_json = None
        for pattern in json_patterns:
            matches = re.finditer(pattern, response_text, re.DOTALL)
            for match in matches:
                try:
                    # Tentar parsear cada match encontrado
                    test_json = json.loads(match.group(1))
                    extracted_json = match.group(1)
                    break
                except json.JSONDecodeError:
                    continue
            if extracted_json:
                break
        
        if not extracted_json:
            extracted_json = response_text.strip()
        
        try:
            data = json.loads(extracted_json)
            
            # Completar campos ausentes
            if required_fields:
                missing_fields = [field for field in required_fields if field not in data]
                if missing_fields:
                    for field in missing_fields:
                        data[field] = ResponseValidator._get_default_value(field)
                    logging.warning(f"Campos preenchidos automaticamente: {missing_fields}")
            
            # Valida√ß√£o especial para c√≥digo
            if 'code' in data and data.get('code'):
                code_length = len(data['code'].strip())
                if code_length < 50:
                    logging.warning(f"C√≥digo muito curto ({code_length} chars) - expandindo")
                    data['code'] = ResponseValidator._expand_minimal_code(
                        data['code'], 
                        data.get('language', 'python')
                    )
                elif code_length > 10000:
                    logging.warning(f"C√≥digo muito longo ({code_length} chars) - truncando")
                    data['code'] = data['code'][:10000] + "\n# ... c√≥digo truncado ..."
            
            return data
            
        except json.JSONDecodeError as e:
            logging.error(f"Falha definitiva no JSON: {e}")
            return ResponseValidator._create_fallback_response(response_text, required_fields)
    
    @staticmethod
    def _get_default_value(field_name: str) -> Any:
        """Valores padr√£o inteligentes por campo"""
        defaults = {
            # Campos de c√≥digo
            'code': '# C√≥digo n√£o gerado devido a erro\nprint("Sistema em modo de recupera√ß√£o")',
            'explanation': 'Explica√ß√£o n√£o dispon√≠vel devido a erro na gera√ß√£o',
            'executable': False,
            'dependencies': [],
            'complexity': 'O(?) - An√°lise indispon√≠vel',
            'features': ['Funcionalidade b√°sica'],
            'dream_insights': ['Gera√ß√£o usando sistema de fallback'],
            'improvements': ['Resolver problemas de gera√ß√£o', 'Adicionar valida√ß√µes'],
            'language': 'python',
            'framework': 'standard',
            
            # Campos de racioc√≠nio
            'logical_answer': 'Resposta n√£o determinada devido a erro',
            'trap_analysis': 'An√°lise de pegadinha n√£o dispon√≠vel',
            'reasoning': 'Racioc√≠nio baseado em sistema de recupera√ß√£o',
            'sub_questions': ['Pergunta n√£o decomposta devido a erro'],
            'critique': 'Cr√≠tica n√£o gerada devido a erro',
            'synthesis': 'S√≠ntese n√£o dispon√≠vel',
            
            # Campos de classifica√ß√£o
            'confidence': 0.3,
            'classification': 'UNKNOWN',
            'fact_or_question': 'Classifica√ß√£o indispon√≠vel',
            'concepts': [],
            
            # Campos gerais
            'has_obvious_solution': False,
            'obvious_solution': 'Solu√ß√£o n√£o identificada',
            'central_premise': 'Premissa n√£o extra√≠da',
            'challenger_findings': 'Verifica√ß√£o n√£o realizada',
            'final_answer': 'Resposta final n√£o gerada'
        }
        return defaults.get(field_name, f'Valor padr√£o para {field_name}')
    
    @staticmethod
    def _expand_minimal_code(code: str, language: str = 'python') -> str:
        """Expans√£o inteligente de c√≥digo m√≠nimo"""
        if language.lower() == 'html':
            return f'''<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>P√°gina Auto-Expandida</title>
    <style>
        body {{
            font-family: Arial, sans-serif;
            margin: 20px;
            background: #f5f5f5;
        }}
        .container {{
            max-width: 800px;
            margin: 0 auto;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}
    </style>
</head>
<body>
    <div class="container">
        <h1>Conte√∫do Auto-Expandido</h1>
        {code}
    </div>
    
    <script>
        console.log("Sistema DREAM V13.2 - C√≥digo HTML expandido automaticamente");
        // C√≥digo JavaScript pode ser adicionado aqui
    </script>
</body>
</html>'''
        
        elif language.lower() in ['javascript', 'js']:
            return f'''// Sistema DREAM V13.2 - C√≥digo JavaScript Expandido
console.log("Inicializando aplica√ß√£o...");

// C√≥digo original expandido
function main() {{
    try {{
        console.log("Executando c√≥digo principal...");
        
        // C√≥digo original aqui
        {code}
        
        console.log("Execu√ß√£o conclu√≠da com sucesso!");
    }} catch (error) {{
        console.error("Erro durante execu√ß√£o:", error);
    }}
}}

// Auto-execu√ß√£o quando DOM estiver pronto
if (typeof document !== 'undefined') {{
    document.addEventListener('DOMContentLoaded', main);
}} else {{
    // Para Node.js
    main();
}}'''
        
        elif language.lower() == 'python':
            return f'''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Sistema DREAM V13.2 - C√≥digo Python Auto-Expandido
Gerado automaticamente pelo sistema de recupera√ß√£o
"""

import sys
import traceback
from datetime import datetime

def main():
    """Fun√ß√£o principal do programa"""
    print("üß† Sistema DREAM V13.2 - C√≥digo Expandido")
    print(f"‚è∞ Executado em: {{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}}")
    print("-" * 50)
    
    try:
        # C√≥digo original expandido
        print("Executando c√≥digo principal...")
        
        {code}
        
        print("\\n‚úÖ Execu√ß√£o conclu√≠da com sucesso!")
        
    except Exception as e:
        print(f"\\n‚ùå Erro durante execu√ß√£o: {{e}}")
        print("\\nüìã Traceback detalhado:")
        traceback.print_exc()
        return False
    
    return True

def show_system_info():
    """Mostra informa√ß√µes do sistema"""
    print(f"üêç Python: {{sys.version}}")
    print(f"üñ•Ô∏è Plataforma: {{sys.platform}}")
    print(f"üìÅ Execut√°vel: {{sys.executable}}")

if __name__ == "__main__":
    print("=" * 60)
    print("üß† DREAM V13.2 - Sistema AGI Multi-LLM")
    print("=" * 60)
    
    show_system_info()
    print()
    
    success = main()
    
    print("\\n" + "=" * 60)
    print(f"üéØ Status Final: {{'‚úÖ Sucesso' if success else '‚ùå Falha'}}")
    print("=" * 60)
    
    sys.exit(0 if success else 1)'''
        
        elif language.lower() in ['css']:
            return f'''/* Sistema DREAM V13.2 - CSS Auto-Expandido */

/* Reset b√°sico */
* {{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}}

/* Estilos base */
body {{
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    line-height: 1.6;
    color: #333;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
}}

/* Container principal */
.container {{
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
    background: rgba(255, 255, 255, 0.95);
    border-radius: 10px;
    box-shadow: 0 10px 30px rgba(0,0,0,0.2);
    margin-top: 50px;
}}

/* C√≥digo original */
{code}

/* Estilos adicionais para responsividade */
@media (max-width: 768px) {{
    .container {{
        margin: 20px;
        padding: 15px;
    }}
}}'''
        
        else:
            # Para outras linguagens ou linguagem desconhecida
            return f'''/*
 * Sistema DREAM V13.2 - C√≥digo Auto-Expandido
 * Linguagem: {language}
 * Gerado automaticamente pelo sistema de recupera√ß√£o
 */

// In√≠cio do c√≥digo expandido
{code}

// Fim do c√≥digo expandido
// Sistema DREAM V13.2 - Expans√£o conclu√≠da'''
    
    @staticmethod
    def _create_fallback_response(text: str, required_fields: List[str] = None) -> Dict:
        """Cria resposta de fallback robusta quando JSON falha completamente"""
        fallback = {
            'raw_response': text[:1000] + "..." if len(text) > 1000 else text,
            'fallback_mode': True,
            'error': 'Falha na decodifica√ß√£o JSON - usando sistema de recupera√ß√£o avan√ßado',
            'recovery_method': 'full_fallback',
            'timestamp': time.time()
        }
        
        if required_fields:
            for field in required_fields:
                fallback[field] = ResponseValidator._get_default_value(field)
        
        # Tentar extrair informa√ß√µes b√°sicas do texto bruto
        if 'code' in (required_fields or []):
            # Procurar por blocos de c√≥digo no texto
            code_patterns = [
                r'```(?:\w+)?\s*(.*?)\s*```',
                r'<code>(.*?)</code>',
                r'def\s+\w+.*?(?=\n\n|\n#|\nclass|\ndef|\Z)',
                r'function\s+\w+.*?(?=\n\n|\n//|\nfunction|\Z)'
            ]
            
            for pattern in code_patterns:
                matches = re.findall(pattern, text, re.DOTALL)
                if matches:
                    fallback['code'] = matches[0].strip()
                    fallback['code_extraction_method'] = f'regex_pattern'
                    break
        
        return fallback

# --- DEFINI√á√ïES FUNDAMENTAIS EXPANDIDAS ---
class IntentType(Enum):
    TRIVIAL_QUERY = "Consulta Trivial"
    RIDDLE_LOGIC = "Charada / L√≥gica Lateral"
    FACTUAL_QUERY = "Pergunta Factual Simples"
    PLANNING_TASK = "Tarefa de Planejamento"
    ACADEMIC_TECHNICAL = "Consulta Acad√™mica / T√©cnica"
    CREATIVE_SYNTHESIS = "S√≠ntese Criativa"
    BROAD_SYNTHESIS = "Pedido de S√≠ntese Ampla"
    PHILOSOPHICAL_INQUIRY = "Investiga√ß√£o Filos√≥fica / Mergulho Profundo"
    COMPLEX_REASONING = "Racioc√≠nio Complexo Multi-Dom√≠nio"
    ANALOGICAL_REASONING = "Racioc√≠nio Anal√≥gico"
    CODE_GENERATION = "Gera√ß√£o de C√≥digo"
    CODE_DEBUGGING = "Debug de C√≥digo"
    SYSTEM_ARCHITECTURE = "Arquitetura de Sistema"
    DATA_ANALYSIS = "An√°lise de Dados"
    MATHEMATICAL_COMPUTATION = "Computa√ß√£o Matem√°tica"
    LANGUAGE_TRANSLATION = "Tradu√ß√£o de Idiomas"
    CREATIVE_WRITING = "Escrita Criativa"
    UNKNOWN = "Inten√ß√£o Desconhecida"

class KnowledgeClassification(Enum):
    ESTABLISHED = "CONHECIMENTO ESTABELECIDO"
    SPECULATIVE = "CONHECIMENTO ESPECULATIVO"
    AMBIGUOUS = "CONCEITO AMB√çGUO"
    UNKNOWN = "CONCEITO DESCONHECIDO"
    FABRICATED = "POSS√çVEL FABRICA√á√ÉO"
    EMERGING = "CONHECIMENTO EMERGENTE"
    VALIDATED = "CONHECIMENTO VALIDADO"
    CONTESTED = "CONHECIMENTO CONTESTADO"

class ReasoningStrategy(Enum):
    RESEARCH_FRAMEWORK_GENERATION = "Gera√ß√£o de Framework de Pesquisa"
    VALIDATED_SYNTHESIS = "S√≠ntese Baseada em Conhecimento Validado"
    CODE_BASED_SOLVER = "Solucionador Baseado em C√≥digo"
    RIDDLE_ANALYSIS = "An√°lise de L√≥gica de Charadas"
    ALGORITHMIC_PLAN_EXECUTION = "Execu√ß√£o de Plano Algor√≠tmico"
    NEURAL_INTUITIVE = "Intui√ß√£o Neural"
    CREATIVE_REASONING = "Racioc√≠nio Criativo"
    HIERARCHICAL_DECOMPOSITION = "Decomposi√ß√£o Hier√°rquica"
    SELF_CRITIQUE_REFINEMENT = "Refinamento com Autocr√≠tica"
    FACT_CHECKING_DEBATE = "Debate Adversarial para Verifica√ß√£o"
    ANALOGICAL_TRANSFER = "Transfer√™ncia Anal√≥gica"
    PRAGMATIC_COMMUNICATION = "Comunica√ß√£o Pragm√°tica"
    FEW_SHOT_ADAPTATION = "Adapta√ß√£o Few-Shot"
    ADVANCED_SYNTHESIS = "S√≠ntese Avan√ßada"
    MULTI_MODAL_REASONING = "Racioc√≠nio Multi-Modal"
    DREAM_CODE_GENERATION = "Gera√ß√£o de C√≥digo via DREAM"
    FALLBACK_RECOVERY = "Recupera√ß√£o por Fallback"
    PLANNING_EXECUTION = "Execu√ß√£o de Plano Estrat√©gico"
    COLLABORATIVE_REASONING = "Racioc√≠nio Colaborativo Multi-Modelo"

@dataclass
class CodeExecution:
    language: str = ""
    code: str = ""
    output: str = ""
    error: str = ""
    execution_time: float = 0.0
    success: bool = False
    return_code: int = -1
    memory_usage: float = 0.0
    security_level: str = "unknown"

@dataclass
class CognitiveState:
    # Informa√ß√µes b√°sicas
    problem: str = ""
    intent: IntentType = IntentType.UNKNOWN
    concepts: List[str] = field(default_factory=list)
    knowledge_map: Dict[str, KnowledgeClassification] = field(default_factory=dict)
    
    # Estado de processamento
    strategy: Optional[ReasoningStrategy] = None
    confidence: float = 0.0
    solution: Any = None
    reasoning_trace: List[str] = field(default_factory=list)
    success: bool = False
    error: Optional[str] = None
    decision_time: float = 0.0
    
    # Resultados espec√≠ficos
    code_execution: Optional[CodeExecution] = None
    generated_code: List[Dict] = field(default_factory=list)
    creative_ideas: List[Dict] = field(default_factory=list)
    analogical_mappings: List[Dict] = field(default_factory=list)
    hierarchical_plan: Dict = field(default_factory=dict)
    pragmatic_context: Dict = field(default_factory=dict)
    learning_patterns: List[Dict] = field(default_factory=list)
    
    # Metadados
    meta_insights: List[str] = field(default_factory=list)
    uncertainty_acknowledgment: List[str] = field(default_factory=list)
    alternative_perspectives: List[str] = field(default_factory=list)
    ethical_considerations: List[str] = field(default_factory=list)
    deep_analysis: Dict = field(default_factory=dict)
    research_directions: List[str] = field(default_factory=list)
    synthesis_quality: float = 0.0
    
    # Sistema
    fallback_mode: bool = False
    recovery_attempts: int = 0
    validation_errors: List[str] = field(default_factory=list)
    sentiment_analysis: Dict = field(default_factory=dict)
    cache_hit: bool = False
    model_used: str = ""
    processing_metadata: Dict = field(default_factory=dict)

# --- ABSTRA√á√ÉO ROBUSTA DE CLIENTES LLM ---
class LLMClient(ABC):
    """Classe abstrata para clientes LLM com interface unificada"""
    
    def __init__(self, model: str, max_retries: int = 3, timeout: int = 60):
        self.model = model
        self.max_retries = max_retries
        self.timeout = timeout
        self.available = self._check_availability()
        self.request_count = 0
        self.error_count = 0
        self.total_tokens = 0
        self.last_request_time = 0
        
    @abstractmethod
    def _check_availability(self) -> bool:
        """Verifica se o cliente est√° dispon√≠vel"""
        pass
    
    @abstractmethod
    def chat(self, messages: List[Dict], format: Optional[str] = None, temperature: float = 0.3) -> Dict:
        """Realiza chat com o modelo"""
        pass
    
    def get_stats(self) -> Dict:
        """Retorna estat√≠sticas do cliente"""
        return {
            'model': self.model,
            'available': self.available,
            'request_count': self.request_count,
            'error_count': self.error_count,
            'success_rate': ((self.request_count - self.error_count) / max(self.request_count, 1)) * 100,
            'total_tokens': self.total_tokens,
            'avg_tokens_per_request': self.total_tokens / max(self.request_count, 1),
            'last_request_time': self.last_request_time
        }
    
    def is_healthy(self) -> bool:
        """Verifica se o cliente est√° saud√°vel"""
        if not self.available:
            return False
        if self.request_count == 0:
            return True
        error_rate = self.error_count / self.request_count
        return error_rate < 0.5  # Menos de 50% de erro

class RobustOllamaClient(LLMClient):
    """Cliente robusto para Ollama com reconex√£o autom√°tica"""
    
    def _check_availability(self) -> bool:
        if not OLLAMA_AVAILABLE:
            logging.warning(f"Ollama n√£o est√° instalado. Modelo {self.model} indispon√≠vel.")
            return False
        
        try:
            import ollama
            result = ollama.show(self.model)
            logging.info(f"Modelo Ollama '{self.model}' dispon√≠vel")
            return True
        except Exception as e:
            logging.warning(f"Modelo Ollama '{self.model}' n√£o dispon√≠vel: {e}")
            return False
    
    def chat(self, messages: List[Dict], format: Optional[str] = None, temperature: float = 0.3) -> Dict:
        if not self.available:
            raise ConnectionError(f"Ollama modelo '{self.model}' n√£o est√° dispon√≠vel")
        
        self.request_count += 1
        self.last_request_time = time.time()
        
        for attempt in range(self.max_retries):
            try:
                import ollama
                
                options = {
                    'temperature': temperature,
                    'num_predict': 4000,  # Limite de tokens de sa√≠da
                    'top_k': 40,
                    'top_p': 0.9,
                }
                
                kwargs = {
                    'model': self.model,
                    'messages': messages,
                    'options': options
                }
                
                if format:
                    kwargs['format'] = format
                
                response = ollama.chat(**kwargs)
                
                # Estimar tokens (aproxima√ß√£o)
                content = response.get('message', {}).get('content', '')
                estimated_tokens = len(content.split()) * 1.3  # Aproxima√ß√£o
                self.total_tokens += estimated_tokens
                
                return response
                
            except Exception as e:
                self.error_count += 1
                logging.warning(f"Ollama tentativa {attempt + 1} falhou: {e}")
                
                if attempt == self.max_retries - 1:
                    raise ConnectionError(f"Todas as {self.max_retries} tentativas falharam para Ollama")
                
                # Backoff exponencial
                time.sleep(2 ** attempt)
        
        raise RuntimeError("Falha inesperada no cliente Ollama")

class OpenAIClient(LLMClient):
    """Cliente robusto para OpenAI com rate limiting e retry"""
    
    def __init__(self, model: str, **kwargs):
        super().__init__(model, **kwargs)
        if self.available:
            try:
                self.client = OpenAI(
                    api_key=OPENAI_API_KEY,
                    timeout=self.timeout,
                    max_retries=self.max_retries
                )
            except Exception as e:
                logging.error(f"Erro ao inicializar cliente OpenAI: {e}")
                self.available = False
    
    def _check_availability(self) -> bool:
        if not OPENAI_AVAILABLE:
            logging.warning(f"OpenAI n√£o est√° dispon√≠vel. Modelo {self.model} indispon√≠vel.")
            return False
        
        try:
            client = OpenAI(api_key=OPENAI_API_KEY, timeout=10)
            # Tentar listar modelos para verificar conectividade
            models = client.models.list()
            
            # Verificar se o modelo espec√≠fico est√° dispon√≠vel
            available_models = [model.id for model in models.data]
            if self.model not in available_models:
                logging.warning(f"Modelo OpenAI '{self.model}' n√£o encontrado. Dispon√≠veis: {available_models[:5]}...")
                # Alguns modelos podem n√£o aparecer na lista mas ainda funcionar
                return True  # Tentar mesmo assim
            
            logging.info(f"Modelo OpenAI '{self.model}' dispon√≠vel")
            return True
            
        except Exception as e:
            logging.warning(f"OpenAI n√£o dispon√≠vel: {e}")
            return False
    
    def chat(self, messages: List[Dict], format: Optional[str] = None, temperature: float = 0.3) -> Dict:
        if not self.available:
            raise ConnectionError(f"OpenAI modelo '{self.model}' n√£o est√° dispon√≠vel")
        
        self.request_count += 1
        self.last_request_time = time.time()
        
        try:
            # Preparar par√¢metros
            params = {
                "model": self.model,
                "messages": messages,
                "temperature": temperature,
                "max_tokens": 4000,
                "top_p": 0.9,
                "frequency_penalty": 0.1,
                "presence_penalty": 0.1
            }
            
            # Adicionar formato JSON se solicitado
            if format == 'json':
                params["response_format"] = {"type": "json_object"}
                # Garantir que a mensagem solicita JSON
                if messages and "json" not in messages[-1]["content"].lower():
                    messages[-1]["content"] += "\n\nResponda em formato JSON v√°lido."
            
            # Fazer a requisi√ß√£o
            response = self.client.chat.completions.create(**params)
            
            # Extrair informa√ß√µes de uso
            usage = response.usage
            if usage:
                self.total_tokens += usage.total_tokens
            
            # Retornar no formato compat√≠vel
            return {
                "message": {
                    "content": response.choices[0].message.content
                },
                "usage": {
                    "prompt_tokens": usage.prompt_tokens if usage else 0,
                    "completion_tokens": usage.completion_tokens if usage else 0,
                    "total_tokens": usage.total_tokens if usage else 0
                }
            }
            
        except Exception as e:
            self.error_count += 1
            logging.error(f"Erro no OpenAI: {e}")
            
            # Rate limiting espec√≠fico
            if "rate_limit" in str(e).lower():
                logging.warning("Rate limit atingido. Aguardando...")
                time.sleep(60)  # Aguardar 1 minuto
                raise ConnectionError("Rate limit atingido. Tente novamente.")
            
            raise ConnectionError(f"Erro OpenAI: {e}")

# --- CACHE INTELIGENTE ROBUSTO ---
class IntelligentCache:
    """Sistema de cache inteligente com LRU e persist√™ncia opcional"""
    
    def __init__(self, max_size: int = 100, enable_persistence: bool = False):
        self.cache = {}
        self.access_count = defaultdict(int)
        self.access_times = defaultdict(list)
        self.max_size = max_size
        self.enable_persistence = enable_persistence
        self.cache_file = Path("dream_cache.json")
        self.hits = 0
        self.misses = 0
        
        if enable_persistence:
            self._load_cache()
    
    def _hash_key(self, problem: str, intent: IntentType) -> str:
        """Cria chave de hash determin√≠stica"""
        content = f"{problem.lower().strip()}_{intent.value}"
        return hashlib.md5(content.encode('utf-8')).hexdigest()
    
    def get(self, problem: str, intent: IntentType) -> Optional[Dict]:
        """Recupera resposta do cache com atualiza√ß√£o de acesso"""
        key = self._hash_key(problem, intent)
        
        if key in self.cache:
            self.access_count[key] += 1
            self.access_times[key].append(time.time())
            self.hits += 1
            
            # Manter apenas os √∫ltimos 10 acessos
            if len(self.access_times[key]) > 10:
                self.access_times[key] = self.access_times[key][-10:]
            
            logging.info(f"Cache HIT para problema: {problem[:50]}...")
            return self.cache[key]
        
        self.misses += 1
        logging.debug(f"Cache MISS para problema: {problem[:50]}...")
        return None
    
    def set(self, problem: str, intent: IntentType, response: Dict):
        """Armazena resposta no cache com limpeza autom√°tica"""
        if len(self.cache) >= self.max_size:
            self._cleanup_cache()
        
        key = self._hash_key(problem, intent)
        self.cache[key] = {
            'response': response,
            'timestamp': time.time(),
            'problem_preview': problem[:100],
            'intent': intent.value,
            'access_count': 1
        }
        
        self.access_count[key] = 1
        self.access_times[key] = [time.time()]
        
        if self.enable_persistence:
            self._save_cache()
        
        logging.debug(f"Cache SET para: {problem[:50]}...")
    
    def _cleanup_cache(self):
        """Remove entradas menos √∫teis usando algoritmo LRU melhorado"""
        if not self.cache:
            return
        
        # Calcular score para cada entrada baseado em:
        # - Frequ√™ncia de acesso
        # - Rec√™ncia do √∫ltimo acesso
        # - Idade da entrada
        current_time = time.time()
        scores = {}
        
        for key, data in self.cache.items():
            access_freq = self.access_count[key]
            last_access = max(self.access_times[key]) if self.access_times[key] else data['timestamp']
            age = current_time - data['timestamp']
            recency = current_time - last_access
            
            # Score maior = mais importante (n√£o remover)
            score = (access_freq * 2) - (age / 3600) - (recency / 1800)  # Pesos ajust√°veis
            scores[key] = score
        
        # Remover 25% das entradas com menor score
        items_to_remove = max(1, len(self.cache) // 4)
        keys_to_remove = sorted(scores.keys(), key=lambda k: scores[k])[:items_to_remove]
        
        for key in keys_to_remove:
            del self.cache[key]
            if key in self.access_count:
                del self.access_count[key]
            if key in self.access_times:
                del self.access_times[key]
        
        logging.info(f"Cache cleanup: removidas {len(keys_to_remove)} entradas")
    
    def _save_cache(self):
        """Salva cache em arquivo (persist√™ncia)"""
        try:
            # Converter para formato serializ√°vel
            serializable_cache = {}
            for key, data in self.cache.items():
                serializable_cache[key] = {
                    'response': data['response'],
                    'timestamp': data['timestamp'],
                    'problem_preview': data['problem_preview'],
                    'intent': data['intent'],
                    'access_count': self.access_count[key]
                }
            
            with open(self.cache_file, 'w', encoding='utf-8') as f:
                json.dump(serializable_cache, f, ensure_ascii=False, indent=2)
                
        except Exception as e:
            logging.warning(f"Erro ao salvar cache: {e}")
    
    def _load_cache(self):
        """Carrega cache do arquivo"""
        try:
            if self.cache_file.exists():
                with open(self.cache_file, 'r', encoding='utf-8') as f:
                    loaded_cache = json.load(f)
                
                for key, data in loaded_cache.items():
                    self.cache[key] = data
                    self.access_count[key] = data.get('access_count', 1)
                    self.access_times[key] = [data['timestamp']]
                
                logging.info(f"Cache carregado: {len(self.cache)} entradas")
                
        except Exception as e:
            logging.warning(f"Erro ao carregar cache: {e}")
    
    def get_stats(self) -> Dict:
        """Retorna estat√≠sticas do cache"""
        total_requests = self.hits + self.misses
        hit_rate = (self.hits / total_requests * 100) if total_requests > 0 else 0
        
        return {
            'size': len(self.cache),
            'max_size': self.max_size,
            'hits': self.hits,
            'misses': self.misses,
            'hit_rate': f"{hit_rate:.1f}%",
            'total_requests': total_requests,
            'persistence_enabled': self.enable_persistence
        }
    
    def clear(self):
        """Limpa todo o cache"""
        self.cache.clear()
        self.access_count.clear()
        self.access_times.clear()
        self.hits = 0
        self.misses = 0
        
        if self.enable_persistence and self.cache_file.exists():
            self.cache_file.unlink()
        
        logging.info("Cache completamente limpo")

# --- COMPONENTES AUXILIARES ROBUSTOS ---
class RobustIntentClassifier:
    """Classificador de inten√ß√£o robusto com m√∫ltiplos m√©todos"""
    
    def __init__(self, llm_client: Optional[LLMClient] = None):
        self.llm_client = llm_client
        self.patterns = self._initialize_patterns()
        self.keyword_mappings = self._initialize_keyword_mappings()
        self.confidence_threshold = 0.7
    
    def _initialize_patterns(self) -> Dict[IntentType, List[str]]:
        """Padr√µes regex para classifica√ß√£o de inten√ß√£o"""
        return {
            IntentType.TRIVIAL_QUERY: [
                r"quantos?\s+\w+\s+(?:temos|tem|h√°|existem?)\s+(?:na|em)",
                r"how\s+many\s+\w+\s+(?:are\s+)?in",
                r"count\s+(?:the\s+)?(?:number\s+of\s+)?\w+\s+in",
                r"conte?\s+(?:as?\s+)?\w+\s+em"
            ],
            IntentType.CODE_GENERATION: [
                r"(?:crie|create|write|desenvolva|develop|implemente|implement|fa√ßa|make|gere|generate|escreva|programa|build)",
                r".*(?:c√≥digo|code|program|app|aplica√ß√£o|jogo|game|script|software|sistema|calculator|website)",
                r"(?:pygame|python|javascript|java|html|css|react|vue|angular|tkinter|flask|django)",
                r"(?:tetris|snake|pong|calculator|todo|login|website|gui|interface|animation|pentagon|ball)"
            ],
            IntentType.RIDDLE_LOGIC: [
                r"which\s+weighs\s+more",
                r"what.*(?:heavier|lighter)",
                r"trick.*question",
                r"pegadinha|charada|enigma|puzzle",
                r"sally.*sisters",
                r"brothers.*sisters",
                r"logic.*puzzle",
                r"o\s+que\s+pesa\s+mais"
            ],
            IntentType.PLANNING_TASK: [
                r"(?:plano|plan|planeje|planejamento|planning)",
                r"(?:passo\s+a\s+passo|step\s+by\s+step)",
                r"(?:como\s+fazer|how\s+to\s+do|how\s+to\s+make)",
                r"(?:estrat√©gia|strategy|roadmap|cronograma)",
                r"(?:torre\s+de\s+han[√≥o]i|tower\s+of\s+hanoi)"
            ],
            IntentType.PHILOSOPHICAL_INQUIRY: [
                r"(?:natureza\s+(?:da|de)|nature\s+of)",
                r"(?:consci√™ncia|consciousness|awareness)",
                r"(?:livre\s+arb√≠trio|free\s+will)",
                r"(?:sentido\s+da\s+vida|meaning\s+of\s+life)",
                r"(?:√©tica\s+(?:da|de)|ethics\s+of)",
                r"(?:filosofia|philosophy|philosophical)",
                r"(?:exist√™ncia|existence|existential)",
                r"(?:prop√≥sito|purpose|significado|meaning)"
            ],
            IntentType.ACADEMIC_TECHNICAL: [
                r"(?:explique\s+a\s+teoria|explain\s+the\s+theory)",
                r"(?:rela√ß√£o\s+entre.*e|relationship\s+between.*and)",
                r"(?:como.*resolve|how.*solves?)",
                r"(?:status\s+do\s+problema|problem\s+status)",
                r"(?:algoritmo\s+de|algorithm\s+for)",
                r"(?:complexidade|complexity|big\s+o)",
                r"(?:prova\s+de|proof\s+of|demonstra√ß√£o)"
            ],
            IntentType.BROAD_SYNTHESIS: [
                r"(?:resuma\s+a\s+hist√≥ria\s+de|summarize\s+the\s+history\s+of)",
                r"(?:fa√ßa\s+uma\s+s√≠ntese\s+sobre|make\s+a\s+synthesis\s+about)",
                r"(?:quais\s+s√£o\s+os\s+principais\s+pontos|what\s+are\s+the\s+main\s+points)",
                r"(?:overview|vis√£o\s+geral|panorama)",
                r"(?:compara√ß√£o\s+entre|comparison\s+between)"
            ],
            IntentType.MATHEMATICAL_COMPUTATION: [
                r"(?:calcule|calculate|compute|resolver)",
                r"(?:integral|derivative|derivada|limite|limit)",
                r"(?:equa√ß√£o|equation|sistema\s+linear)",
                r"(?:matriz|matrix|determinante|eigenvalue)",
                r"(?:fun√ß√£o|function|dom√≠nio|domain)"
            ],
            IntentType.CREATIVE_WRITING: [
                r"(?:escreva\s+(?:uma\s+)?(?:hist√≥ria|story|poema|poem))",
                r"(?:crie\s+(?:um\s+)?(?:roteiro|script|di√°logo))",
                r"(?:invente|imagine|fantasia|creative)",
                r"(?:narrativa|narrative|fic√ß√£o|fiction)"
            ]
        }
    
    def _initialize_keyword_mappings(self) -> Dict[IntentType, List[str]]:
        """Mapeamentos de palavras-chave para classifica√ß√£o"""
        return {
            IntentType.CODE_GENERATION: [
                'c√≥digo', 'code', 'program', 'jogo', 'game', 'site', 'app',
                'calculadora', 'calculator', 'interface', 'gui', 'script',
                'animation', 'anima√ß√£o', 'pentagon', 'ball', 'gravity', 'physics',
                'interactive', 'web', 'html', 'css', 'javascript', 'python',
                'tkinter', 'pygame', 'flask', 'django', 'react', 'vue'
            ],
            IntentType.ACADEMIC_TECHNICAL: [
                'pesquisa', 'research', 'teoria', 'theory', 'ci√™ncia', 'science',
                'algoritmo', 'algorithm', 'matem√°tica', 'mathematics', 'f√≠sica',
                'physics', 'qu√≠mica', 'chemistry', 'biologia', 'biology'
            ],
            IntentType.CREATIVE_SYNTHESIS: [
                'criativo', 'creative', 'inova√ß√£o', 'innovation', 'imagine',
                'inventar', 'criar', 'design', 'arte', 'art'
            ],
            IntentType.PHILOSOPHICAL_INQUIRY: [
                'filosofia', 'philosophy', '√©tica', 'ethics', 'moral', 'sentido',
                'meaning', 'consciousness', 'consci√™ncia', 'exist√™ncia', 'existence'
            ],
            IntentType.RIDDLE_LOGIC: [
                'charada', 'riddle', 'puzzle', 'enigma', 'pegadinha', 'trick',
                'logic', 'l√≥gica', 'pesa', 'weighs', 'heavier', 'lighter'
            ],
            IntentType.PLANNING_TASK: [
                'plano', 'plan', 'planejamento', 'planning', 'estrat√©gia',
                'strategy', 'passo', 'step', 'como fazer', 'how to'
            ]
        }
    
    def classify(self, problem: str) -> Tuple[IntentType, float]:
        """Classifica inten√ß√£o com m√∫ltiplos m√©todos e retorna confian√ßa"""
        problem_lower = problem.lower()
        
        # M√©todo 1: Padr√µes regex (alta confian√ßa)
        for intent_type, patterns in self.patterns.items():
            for pattern in patterns:
                if re.search(pattern, problem_lower):
                    return intent_type, 0.9
        
        # M√©todo 2: Palavras-chave (confian√ßa m√©dia)
        keyword_scores = {}
        for intent_type, keywords in self.keyword_mappings.items():
            score = sum(1 for keyword in keywords if keyword in problem_lower)
            if score > 0:
                keyword_scores[intent_type] = score
        
        if keyword_scores:
            best_intent = max(keyword_scores, key=keyword_scores.get)
            max_score = keyword_scores[best_intent]
            confidence = min(0.8, 0.4 + (max_score * 0.1))
            return best_intent, confidence
        
        # M√©todo 3: LLM (se dispon√≠vel) - confian√ßa vari√°vel
        if self.llm_client and self.llm_client.available:
            try:
                llm_intent, llm_confidence = self._classify_with_llm(problem)
                if llm_confidence >= self.confidence_threshold:
                    return llm_intent, llm_confidence
            except Exception as e:
                logging.warning(f"Classifica√ß√£o LLM falhou: {e}")
        
        # M√©todo 4: Heur√≠sticas simples (baixa confian√ßa)
        if any(word in problem_lower for word in ['?', 'como', 'what', 'how', 'why', 'quando', 'where']):
            return IntentType.FACTUAL_QUERY, 0.5
        
        if len(problem.split()) > 20:
            return IntentType.BROAD_SYNTHESIS, 0.4
        
        # Fallback
        return IntentType.FACTUAL_QUERY, 0.3
    
    def _classify_with_llm(self, problem: str) -> Tuple[IntentType, float]:
        """Classifica√ß√£o usando LLM"""
        intent_descriptions = {
            intent.name: intent.value for intent in IntentType
        }
        
        prompt = f"""Classifique a inten√ß√£o desta pergunta em UMA categoria:
"{problem}"

Categorias dispon√≠veis:
{json.dumps(intent_descriptions, indent=2, ensure_ascii=False)}

Responda APENAS com o nome da categoria (ex: CODE_GENERATION), sem explica√ß√µes."""
        
        try:
            response = self.llm_client.chat(
                messages=[{'role': 'user', 'content': prompt}],
                temperature=0.0
            )
            
            intent_name = response['message']['content'].strip().upper()
            
            # Procurar por correspond√™ncia exata
            for intent in IntentType:
                if intent.name == intent_name:
                    return intent, 0.8
            
            # Procurar por correspond√™ncia parcial
            for intent in IntentType:
                if intent.name in intent_name or intent_name in intent.name:
                    return intent, 0.6
            
            return IntentType.FACTUAL_QUERY, 0.4
            
        except Exception as e:
            logging.error(f"Erro na classifica√ß√£o LLM: {e}")
            return IntentType.FACTUAL_QUERY, 0.3

class SentimentAnalyzer:
    """Analisador de sentimento e contexto da pergunta"""
    
    def analyze(self, problem: str) -> Dict:
        """Analisa sentimento, urg√™ncia, complexidade e outras m√©tricas"""
        problem_lower = problem.lower()
        
        # An√°lise de urg√™ncia
        urgency_keywords = [
            'urgente', 'r√°pido', 'agora', 'imediato', 'hoje', 'j√°',
            'urgent', 'quickly', 'now', 'immediate', 'asap', 'fast'
        ]
        urgency_score = sum(1 for keyword in urgency_keywords if keyword in problem_lower)
        
        # An√°lise de polidez
        politeness_keywords = [
            'por favor', 'obrigado', 'obrigada', 'agrade√ßo', 'grato',
            'please', 'thank you', 'thanks', 'appreciate', 'grateful',
            'poderia', 'seria poss√≠vel', 'could you', 'would you'
        ]
        politeness_score = sum(1 for keyword in politeness_keywords if keyword in problem_lower)
        
        # An√°lise de complexidade
        complexity_keywords = [
            'complexo', 'dif√≠cil', 'avan√ßado', 'complicado', 'elaborado',
            'complex', 'difficult', 'advanced', 'complicated', 'sophisticated',
            'detalhado', 'completo', 'abrangente', 'detailed', 'comprehensive'
        ]
        complexity_score = sum(1 for keyword in complexity_keywords if keyword in problem_lower)
        
        # An√°lise de incerteza
        uncertainty_keywords = [
            'talvez', 'pode ser', 'acho que', 'parece', 'provavelmente',
            'maybe', 'perhaps', 'might', 'seems', 'probably', 'possibly'
        ]
        uncertainty_score = sum(1 for keyword in uncertainty_keywords if keyword in problem_lower)
        
        # An√°lise de emo√ß√£o
        positive_keywords = [
            'gosto', 'amo', 'adoro', 'interessante', 'incr√≠vel', '√≥timo',
            'love', 'like', 'amazing', 'great', 'awesome', 'fantastic'
        ]
        negative_keywords = [
            'odeio', 'detesto', 'horr√≠vel', 'p√©ssimo', 'ruim', 'problema',
            'hate', 'terrible', 'awful', 'bad', 'horrible', 'issue'
        ]
        
        positive_score = sum(1 for keyword in positive_keywords if keyword in problem_lower)
        negative_score = sum(1 for keyword in negative_keywords if keyword in problem_lower)
        
        # C√°lculo de m√©tricas
        word_count = len(problem.split())
        char_count = len(problem)
        sentence_count = len(re.findall(r'[.!?]+', problem))
        question_marks = problem.count('?')
        
        # Determinar tom geral
        if politeness_score > 0:
            tone = 'polite'
        elif negative_score > positive_score:
            tone = 'negative'
        elif positive_score > 0:
            tone = 'positive'
        else:
            tone = 'neutral'
        
        # Determinar categoria de complexidade
        if complexity_score > 2 or word_count > 50:
            complexity_category = 'high'
        elif complexity_score > 0 or word_count > 20:
            complexity_category = 'medium'
        else:
            complexity_category = 'low'
        
        return {
            'urgency': min(urgency_score / 3.0, 1.0),
            'politeness': min(politeness_score / 3.0, 1.0),
            'complexity': min(complexity_score / 3.0, 1.0),
            'uncertainty': min(uncertainty_score / 3.0, 1.0),
            'emotion_score': positive_score - negative_score,
            'word_count': word_count,
            'char_count': char_count,
            'sentence_count': max(sentence_count, 1),
            'question_marks': question_marks,
            'tone': tone,
            'complexity_category': complexity_category,
            'avg_words_per_sentence': word_count / max(sentence_count, 1),
            'is_question': question_marks > 0 or any(
                problem_lower.startswith(q) for q in ['como', 'what', 'how', 'why', 'quando', 'onde', 'quem']
            ),
            'formality_level': 'formal' if politeness_score > 1 else 'informal'
        }

# --- HANDLER DE C√ìDIGO ROBUSTO (VERS√ÉO COMPLETA) ---
class RobustCodeGenerationHandler:
    """Handler robusto para gera√ß√£o de c√≥digo com templates e valida√ß√£o"""
    
    def __init__(self):
        self.code_templates = self._initialize_templates()
        self.language_detectors = self._initialize_language_detectors()
        self.project_type_detectors = self._initialize_project_type_detectors()
        self.complexity_analyzers = self._initialize_complexity_analyzers()
    
    def _initialize_templates(self) -> Dict:
        """Templates de c√≥digo robustos e completos"""
        return {
            'html_pentagon_animation': '''<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pent√°gono Rotativo com F√≠sica da Bola</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            background: linear-gradient(135deg, #1e3c72, #2a5298);
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            font-family: 'Arial', sans-serif;
            overflow: hidden;
        }
        
        .container {
            position: relative;
            width: 400px;
            height: 400px;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        
        .pentagon-container {
            position: absolute;
            width: 300px;
            height: 300px;
            animation: rotate 8s linear infinite;
        }
        
        .pentagon {
            width: 100%;
            height: 100%;
            background: rgba(255, 255, 255, 0.1);
            border: 3px solid #4CAF50;
            clip-path: polygon(50% 0%, 100% 38%, 82% 100%, 18% 100%, 0% 38%);
            box-shadow: 
                0 0 20px rgba(76, 175, 80, 0.5),
                inset 0 0 20px rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
        }
        
        .ball {
            position: absolute;
            width: 20px;
            height: 20px;
            background: radial-gradient(circle at 30% 30%, #ff6b6b, #ee5a52, #dc3545);
            border-radius: 50%;
            box-shadow: 
                0 0 15px rgba(255, 107, 107, 0.8),
                inset -2px -2px 5px rgba(0, 0, 0, 0.3),
                inset 2px 2px 5px rgba(255, 255, 255, 0.3);
            z-index: 10;
            transition: transform 0.016s ease-out;
        }
        
        @keyframes rotate {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }
        
        .info {
            position: absolute;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            color: white;
            text-align: center;
            font-size: 14px;
            background: rgba(0, 0, 0, 0.5);
            padding: 10px 20px;
            border-radius: 20px;
            backdrop-filter: blur(10px);
        }
        
        .controls {
            position: absolute;
            top: 20px;
            left: 20px;
            color: white;
            font-size: 12px;
        }
        
        .controls button {
            background: rgba(255, 255, 255, 0.2);
            border: none;
            color: white;
            padding: 5px 10px;
            margin: 2px;
            border-radius: 5px;
            cursor: pointer;
            transition: background 0.3s;
        }
        
        .controls button:hover {
            background: rgba(255, 255, 255, 0.3);
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="pentagon-container" id="pentagon-container">
            <div class="pentagon"></div>
        </div>
        <div class="ball" id="ball"></div>
        
        <div class="info">
            <h3>üîÆ Pent√°gono M√°gico com F√≠sica Realista</h3>
            <p>Bola com gravidade simulada ‚Ä¢ Colis√£o precisa ‚Ä¢ F√≠sica 2D</p>
        </div>
        
        <div class="controls">
            <button onclick="physics.resetBall()">üîÑ Reset</button>
            <button onclick="physics.toggleGravity()">‚ö° Gravidade</button>
            <button onclick="physics.addImpulse()">üöÄ Impulso</button>
        </div>
    </div>
    
    <script>
        class PentagonPhysicsEngine {
            constructor() {
                this.ball = document.getElementById('ball');
                this.pentagon = document.getElementById('pentagon-container');
                
                // Estado da bola
                this.ballPosition = { x: 0, y: 0 };
                this.ballVelocity = { x: 0, y: 0 };
                this.ballRadius = 10;
                
                // Configura√ß√µes f√≠sicas
                this.gravity = 0.4;
                this.gravityEnabled = true;
                this.friction = 0.99;
                this.bounce = 0.85;
                this.airResistance = 0.999;
                
                // Geometria do pent√°gono
                this.pentagonRadius = 130;
                this.pentagonVertices = this.calculatePentagonVertices();
                
                // Estado da anima√ß√£o
                this.animationId = null;
                this.lastTime = 0;
                
                this.init();
            }
            
            calculatePentagonVertices() {
                const vertices = [];
                const angleStep = (Math.PI * 2) / 5;
                const startAngle = -Math.PI / 2; // Come√ßar do topo
                
                for (let i = 0; i < 5; i++) {
                    const angle = startAngle + (i * angleStep);
                    vertices.push({
                        x: Math.cos(angle) * this.pentagonRadius,
                        y: Math.sin(angle) * this.pentagonRadius
                    });
                }
                
                return vertices;
            }
            
            init() {
                this.resetBall();
                this.startAnimation();
                this.setupEventListeners();
            }
            
            setupEventListeners() {
                // Clique para adicionar impulso aleat√≥rio
                this.ball.addEventListener('click', () => this.addImpulse());
                
                // Teclas para controle
                document.addEventListener('keydown', (e) => {
                    switch(e.key.toLowerCase()) {
                        case 'r': this.resetBall(); break;
                        case 'g': this.toggleGravity(); break;
                        case ' ': this.addImpulse(); e.preventDefault(); break;
                        case 'arrowup': this.ballVelocity.y -= 2; break;
                        case 'arrowdown': this.ballVelocity.y += 2; break;
                        case 'arrowleft': this.ballVelocity.x -= 2; break;
                        case 'arrowright': this.ballVelocity.x += 2; break;
                    }
                });
            }
            
            resetBall() {
                this.ballPosition = { x: 0, y: -50 };
                this.ballVelocity = { 
                    x: (Math.random() - 0.5) * 4, 
                    y: (Math.random() - 0.5) * 2 
                };
                this.updateBallVisual();
            }
            
            toggleGravity() {
                this.gravityEnabled = !this.gravityEnabled;
                console.log(`Gravidade: ${this.gravityEnabled ? 'ON' : 'OFF'}`);
            }
            
            addImpulse() {
                const impulse = {
                    x: (Math.random() - 0.5) * 8,
                    y: (Math.random() - 0.5) * 8
                };
                this.ballVelocity.x += impulse.x;
                this.ballVelocity.y += impulse.y;
            }
            
            getCurrentPentagonRotation() {
                const computedStyle = getComputedStyle(this.pentagon);
                const transform = computedStyle.transform;
                
                if (transform === 'none') return 0;
                
                const values = transform.split('(')[1].split(')')[0].split(',');
                const a = parseFloat(values[0]);
                const b = parseFloat(values[1]);
                
                return Math.atan2(b, a);
            }
            
            rotatePoint(point, angle) {
                const cos = Math.cos(angle);
                const sin = Math.sin(angle);
                
                return {
                    x: point.x * cos - point.y * sin,
                    y: point.x * sin + point.y * cos
                };
            }
            
            isPointInsidePentagon(point) {
                const rotation = this.getCurrentPentagonRotation();
                const rotatedVertices = this.pentagonVertices.map(v => this.rotatePoint(v, rotation));
                
                // Algoritmo de ray casting
                let inside = false;
                const { x, y } = point;
                
                for (let i = 0, j = rotatedVertices.length - 1; i < rotatedVertices.length; j = i++) {
                    const xi = rotatedVertices[i].x;
                    const yi = rotatedVertices[i].y;
                    const xj = rotatedVertices[j].x;
                    const yj = rotatedVertices[j].y;
                    
                    if (((yi > y) !== (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi)) {
                        inside = !inside;
                    }
                }
                
                return inside;
            }
            
            getClosestPointOnPentagonEdge(point) {
                const rotation = this.getCurrentPentagonRotation();
                const rotatedVertices = this.pentagonVertices.map(v => this.rotatePoint(v, rotation));
                
                let closestPoint = point;
                let minDistance = Infinity;
                let closestNormal = { x: 0, y: 1 };
                
                for (let i = 0; i < rotatedVertices.length; i++) {
                    const v1 = rotatedVertices[i];
                    const v2 = rotatedVertices[(i + 1) % rotatedVertices.length];
                    
                    // Encontrar ponto mais pr√≥ximo na aresta
                    const edge = { x: v2.x - v1.x, y: v2.y - v1.y };
                    const edgeLength = Math.sqrt(edge.x * edge.x + edge.y * edge.y);
                    const edgeUnit = { x: edge.x / edgeLength, y: edge.y / edgeLength };
                    
                    const toPoint = { x: point.x - v1.x, y: point.y - v1.y };
                    const projection = Math.max(0, Math.min(edgeLength, 
                        toPoint.x * edgeUnit.x + toPoint.y * edgeUnit.y
                    ));
                    
                    const pointOnEdge = {
                        x: v1.x + edgeUnit.x * projection,
                        y: v1.y + edgeUnit.y * projection
                    };
                    
                    const distance = Math.sqrt(
                        Math.pow(point.x - pointOnEdge.x, 2) + 
                        Math.pow(point.y - pointOnEdge.y, 2)
                    );
                    
                    if (distance < minDistance) {
                        minDistance = distance;
                        closestPoint = pointOnEdge;
                        
                        // Calcular normal da aresta (apontando para dentro)
                        const normal = { x: -edgeUnit.y, y: edgeUnit.x };
                        const center = { x: 0, y: 0 };
                        const toCenter = { 
                            x: center.x - pointOnEdge.x, 
                            y: center.y - pointOnEdge.y 
                        };
                        
                        // Garantir que a normal aponta para dentro
                        if (normal.x * toCenter.x + normal.y * toCenter.y < 0) {
                            normal.x = -normal.x;
                            normal.y = -normal.y;
                        }
                        
                        closestNormal = normal;
                    }
                }
                
                return { point: closestPoint, normal: closestNormal, distance: minDistance };
            }
            
            update(deltaTime) {
                // Aplicar gravidade relativa ao pent√°gono
                if (this.gravityEnabled) {
                    const rotation = this.getCurrentPentagonRotation();
                    const gravityVector = this.rotatePoint({ x: 0, y: this.gravity }, rotation);
                    
                    this.ballVelocity.x += gravityVector.x * deltaTime;
                    this.ballVelocity.y += gravityVector.y * deltaTime;
                }
                
                // Aplicar resist√™ncia do ar
                this.ballVelocity.x *= Math.pow(this.airResistance, deltaTime);
                this.ballVelocity.y *= Math.pow(this.airResistance, deltaTime);
                
                // Atualizar posi√ß√£o
                this.ballPosition.x += this.ballVelocity.x * deltaTime;
                this.ballPosition.y += this.ballVelocity.y * deltaTime;
                
                // Verificar colis√£o com as bordas do pent√°gono
                if (!this.isPointInsidePentagon(this.ballPosition)) {
                    const collision = this.getClosestPointOnPentagonEdge(this.ballPosition);
                    
                    // Posicionar a bola na borda
                    const pushDistance = this.ballRadius;
                    this.ballPosition.x = collision.point.x + collision.normal.x * pushDistance;
                    this.ballPosition.y = collision.point.y + collision.normal.y * pushDistance;
                    
                    // Calcular reflex√£o da velocidade
                    const velocityDotNormal = 
                        this.ballVelocity.x * collision.normal.x + 
                        this.ballVelocity.y * collision.normal.y;
                    
                    if (velocityDotNormal < 0) { // Movendo-se em dire√ß√£o √† parede
                        this.ballVelocity.x -= 2 * velocityDotNormal * collision.normal.x;
                        this.ballVelocity.y -= 2 * velocityDotNormal * collision.normal.y;
                        
                        // Aplicar coeficiente de restitui√ß√£o
                        this.ballVelocity.x *= this.bounce;
                        this.ballVelocity.y *= this.bounce;
                    }
                }
                
                this.updateBallVisual();
            }
            
            updateBallVisual() {
                const centerX = 200; // Centro do container
                const centerY = 200;
                
                this.ball.style.left = `${centerX + this.ballPosition.x - this.ballRadius}px`;
                this.ball.style.top = `${centerY + this.ballPosition.y - this.ballRadius}px`;
            }
            
            startAnimation() {
                const animate = (currentTime) => {
                    if (this.lastTime === 0) this.lastTime = currentTime;
                    
                    const deltaTime = Math.min((currentTime - this.lastTime) / 1000, 1/30); // M√°ximo 30 FPS
                    this.lastTime = currentTime;
                    
                    this.update(deltaTime * 60); // Normalizar para 60 FPS
                    
                    this.animationId = requestAnimationFrame(animate);
                };
                
                this.animationId = requestAnimationFrame(animate);
            }
            
            stop() {
                if (this.animationId) {
                    cancelAnimationFrame(this.animationId);
                    this.animationId = null;
                }
            }
        }
        
        // Inicializar a simula√ß√£o quando a p√°gina carregar
        let physics;
        
        document.addEventListener('DOMContentLoaded', () => {
            physics = new PentagonPhysicsEngine();
            
            // Log de controles
            console.log(`
üéÆ CONTROLES DISPON√çVEIS:
‚Ä¢ R - Reset da bola
‚Ä¢ G - Toggle gravidade
‚Ä¢ Espa√ßo - Impulso aleat√≥rio
‚Ä¢ Setas - Movimento manual
‚Ä¢ Clique na bola - Impulso
            `);
        });
        
        // Pausar/continuar com visibilidade da p√°gina
        document.addEventListener('visibilitychange', () => {
            if (physics) {
                if (document.hidden) {
                    physics.stop();
                } else {
                    physics.startAnimation();
                }
            }
        });
    </script>
</body>
</html>''',
            
            'python_calculator': '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Calculadora Avan√ßada - Sistema DREAM V13.2
Calculadora robusta com m√∫ltiplas opera√ß√µes e tratamento de erros
"""

import math
import sys
from typing import Union, List, Dict

class AdvancedCalculator:
    """Calculadora avan√ßada com m√∫ltiplas opera√ß√µes"""
    
    def __init__(self):
        self.history: List[str] = []
        self.memory: float = 0.0
        self.last_result: float = 0.0
        
    def add(self, a: float, b: float) -> float:
        """Soma dois n√∫meros"""
        result = a + b
        self._record_operation(f"{a} + {b} = {result}")
        return result
    
    def subtract(self, a: float, b: float) -> float:
        """Subtrai dois n√∫meros"""
        result = a - b
        self._record_operation(f"{a} - {b} = {result}")
        return result
    
    def multiply(self, a: float, b: float) -> float:
        """Multiplica dois n√∫meros"""
        result = a * b
        self._record_operation(f"{a} √ó {b} = {result}")
        return result
    
    def divide(self, a: float, b: float) -> float:
        """Divide dois n√∫meros"""
        if b == 0:
            raise ValueError("Divis√£o por zero n√£o √© permitida!")
        result = a / b
        self._record_operation(f"{a} √∑ {b} = {result}")
        return result
    
    def power(self, base: float, exponent: float) -> float:
        """Calcula base elevado a exponent"""
        result = math.pow(base, exponent)
        self._record_operation(f"{base}^{exponent} = {result}")
        return result
    
    def square_root(self, x: float) -> float:
        """Calcula raiz quadrada"""
        if x < 0:
            raise ValueError("Raiz quadrada de n√∫mero negativo!")
        result = math.sqrt(x)
        self._record_operation(f"‚àö{x} = {result}")
        return result
    
    def factorial(self, n: int) -> int:
        """Calcula fatorial"""
        if n < 0:
            raise ValueError("Fatorial de n√∫mero negativo!")
        if n > 170:
            raise ValueError("N√∫mero muito grande para fatorial!")
        result = math.factorial(n)
        self._record_operation(f"{n}! = {result}")
        return result
    
    def percentage(self, value: float, percent: float) -> float:
        """Calcula porcentagem"""
        result = (value * percent) / 100
        self._record_operation(f"{percent}% de {value} = {result}")
        return result
    
    def _record_operation(self, operation: str):
        """Registra opera√ß√£o no hist√≥rico"""
        self.history.append(operation)
        if len(self.history) > 50:  # Manter apenas 50 opera√ß√µes
            self.history.pop(0)
    
    def get_history(self) -> List[str]:
        """Retorna hist√≥rico de opera√ß√µes"""
        return self.history.copy()
    
    def clear_history(self):
        """Limpa hist√≥rico"""
        self.history.clear()
    
    def store_memory(self, value: float):
        """Armazena valor na mem√≥ria"""
        self.memory = value
        print(f"üíæ Valor {value} armazenado na mem√≥ria")
    
    def recall_memory(self) -> float:
        """Recupera valor da mem√≥ria"""
        print(f"üíæ Valor da mem√≥ria: {self.memory}")
        return self.memory
    
    def clear_memory(self):
        """Limpa mem√≥ria"""
        self.memory = 0.0
        print("üíæ Mem√≥ria limpa")

def get_number_input(prompt: str) -> float:
    """Obt√©m entrada num√©rica do usu√°rio com valida√ß√£o"""
    while True:
        try:
            value = input(prompt).strip()
            
            # Permitir usar resultado anterior
            if value.lower() == 'ans':
                return calculator.last_result
            
            # Permitir usar mem√≥ria
            if value.lower() == 'mem':
                return calculator.recall_memory()
            
            return float(value)
            
        except ValueError:
            print("‚ùå Erro: Digite um n√∫mero v√°lido!")
        except KeyboardInterrupt:
            print("\\nüëã Opera√ß√£o cancelada!")
            return None

def show_menu():
    """Exibe menu principal"""
    print("\\n" + "="*50)
    print("üßÆ CALCULADORA AVAN√áADA - DREAM V13.2")
    print("="*50)
    print("1Ô∏è‚É£  Somar")
    print("2Ô∏è‚É£  Subtrair")
    print("3Ô∏è‚É£  Multiplicar")
    print("4Ô∏è‚É£  Dividir")
    print("5Ô∏è‚É£  Potencia√ß√£o")
    print("6Ô∏è‚É£  Raiz Quadrada")
    print("7Ô∏è‚É£  Fatorial")
    print("8Ô∏è‚É£  Porcentagem")
    print("9Ô∏è‚É£  Hist√≥rico")
    print("üîü Mem√≥ria")
    print("0Ô∏è‚É£  Sair")
    print("-"*50)
    print("üí° Dicas:")
    print("   ‚Ä¢ Use 'ans' para o √∫ltimo resultado")
    print("   ‚Ä¢ Use 'mem' para valor da mem√≥ria")
    print("   ‚Ä¢ Ctrl+C para cancelar opera√ß√£o")
    print("="*50)

def show_memory_menu():
    """Exibe menu de mem√≥ria"""
    print("\\n" + "="*30)
    print("üíæ MENU DE MEM√ìRIA")
    print("="*30)
    print("1. Armazenar na mem√≥ria")
    print("2. Recuperar da mem√≥ria")
    print("3. Limpar mem√≥ria")
    print("4. Voltar ao menu principal")
    print("="*30)

def handle_basic_operations(operation: str) -> bool:
    """Manipula opera√ß√µes b√°sicas (2 n√∫meros)"""
    operations_map = {
        '1': ('somar', calculator.add),
        '2': ('subtrair', calculator.subtract),
        '3': ('multiplicar', calculator.multiply),
        '4': ('dividir', calculator.divide),
        '5': ('potencia√ß√£o', calculator.power)
    }
    
    if operation not in operations_map:
        return False
    
    op_name, op_func = operations_map[operation]
    
    print(f"\\nüìê Opera√ß√£o: {op_name.title()}")
    
    num1 = get_number_input("Digite o primeiro n√∫mero: ")
    if num1 is None:
        return True
    
    num2 = get_number_input("Digite o segundo n√∫mero: ")
    if num2 is None:
        return True
    
    try:
        result = op_func(num1, num2)
        calculator.last_result = result
        print(f"\\n‚úÖ Resultado: {result}")
        
        # Oferecer armazenar na mem√≥ria
        store = input("\\nüíæ Armazenar resultado na mem√≥ria? (s/N): ").lower()
        if store == 's':
            calculator.store_memory(result)
            
    except ValueError as e:
        print(f"\\n‚ùå Erro: {e}")
    except Exception as e:
        print(f"\\n‚ùå Erro inesperado: {e}")
    
    return True

def handle_single_operations(operation: str) -> bool:
    """Manipula opera√ß√µes de um n√∫mero"""
    if operation == '6':  # Raiz quadrada
        print("\\nüìê Opera√ß√£o: Raiz Quadrada")
        num = get_number_input("Digite o n√∫mero: ")
        if num is None:
            return True
            
        try:
            result = calculator.square_root(num)
            calculator.last_result = result
            print(f"\\n‚úÖ Resultado: {result}")
        except ValueError as e:
            print(f"\\n‚ùå Erro: {e}")
            
    elif operation == '7':  # Fatorial
        print("\\nüìê Opera√ß√£o: Fatorial")
        num = get_number_input("Digite o n√∫mero (inteiro): ")
        if num is None:
            return True
            
        try:
            if not num.is_integer():
                print("‚ùå Erro: Fatorial requer n√∫mero inteiro!")
                return True
                
            result = calculator.factorial(int(num))
            calculator.last_result = result
            print(f"\\n‚úÖ Resultado: {result}")
        except ValueError as e:
            print(f"\\n‚ùå Erro: {e}")
            
    elif operation == '8':  # Porcentagem
        print("\\nüìê Opera√ß√£o: Porcentagem")
        value = get_number_input("Digite o valor: ")
        if value is None:
            return True
            
        percent = get_number_input("Digite a porcentagem: ")
        if percent is None:
            return True
            
        try:
            result = calculator.percentage(value, percent)
            calculator.last_result = result
            print(f"\\n‚úÖ Resultado: {result}")
        except Exception as e:
            print(f"\\n‚ùå Erro: {e}")
    else:
        return False
    
    return True

def handle_history():
    """Mostra hist√≥rico de opera√ß√µes"""
    history = calculator.get_history()
    
    if not history:
        print("\\nüìã Hist√≥rico vazio")
        return
    
    print("\\n" + "="*40)
    print("üìã HIST√ìRICO DE OPERA√á√ïES")
    print("="*40)
    
    for i, operation in enumerate(history[-10:], 1):  # √öltimas 10
        print(f"{i:2d}. {operation}")
    
    print("="*40)
    print(f"Total de opera√ß√µes: {len(history)}")
    
    if len(history) > 10:
        print("(Mostrando apenas as 10 mais recentes)")
    
    # Op√ß√£o de limpar hist√≥rico
    clear = input("\\nüóëÔ∏è Limpar hist√≥rico? (s/N): ").lower()
    if clear == 's':
        calculator.clear_history()
        print("‚úÖ Hist√≥rico limpo!")

def handle_memory():
    """Manipula opera√ß√µes de mem√≥ria"""
    while True:
        show_memory_menu()
        choice = input("\\nEscolha uma op√ß√£o: ").strip()
        
        if choice == '1':
            value = get_number_input("Digite o valor para armazenar: ")
            if value is not None:
                calculator.store_memory(value)
                
        elif choice == '2':
            value = calculator.recall_memory()
            
        elif choice == '3':
            calculator.clear_memory()
            
        elif choice == '4':
            break
            
        else:
            print("‚ùå Op√ß√£o inv√°lida!")

def main():
    """Fun√ß√£o principal da calculadora"""
    global calculator
    calculator = AdvancedCalculator()
    
    print("üßÆ Calculadora Avan√ßada iniciada!")
    print("Sistema DREAM V13.2 - Vers√£o Robusta")
    
    while True:
        try:
            show_menu()
            choice = input("\\nEscolha uma op√ß√£o: ").strip()
            
            if choice == '0':
                print("\\nüëã Encerrando calculadora...")
                print("üìä Estat√≠sticas da sess√£o:")
                print(f"   ‚Ä¢ Opera√ß√µes realizadas: {len(calculator.get_history())}")
                print(f"   ‚Ä¢ √öltimo resultado: {calculator.last_result}")
                print(f"   ‚Ä¢ Valor na mem√≥ria: {calculator.memory}")
                print("\\nüßÆ Obrigado por usar a Calculadora Avan√ßada!")
                break
            
            elif choice in ['1', '2', '3', '4', '5']:
                handle_basic_operations(choice)
                
            elif choice in ['6', '7', '8']:
                handle_single_operations(choice)
                
            elif choice == '9':
                handle_history()
                
            elif choice == '10':
                handle_memory()
                
            else:
                print("\\n‚ùå Op√ß√£o inv√°lida! Escolha um n√∫mero de 0 a 10.")
            
            # Pausar para o usu√°rio ler o resultado
            if choice != '0':
                input("\\n‚èé Pressione Enter para continuar...")
                
        except KeyboardInterrupt:
            print("\\n\\nüõë Calculadora interrompida pelo usu√°rio!")
            confirm = input("Deseja realmente sair? (s/N): ").lower()
            if confirm == 's':
                break
            else:
                print("Continuando...")
                
        except Exception as e:
            print(f"\\n‚ùå Erro inesperado: {e}")
            print("üîß A calculadora continuar√° funcionando...")

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"\\nüí• Erro fatal: {e}")
        print("üîß Reinicie a calculadora")
        sys.exit(1)
''',
            
            'python_gui_calculator': '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Calculadora GUI Avan√ßada - Sistema DREAM V13.2
Interface gr√°fica moderna com Tkinter
"""

import tkinter as tk
from tkinter import ttk, messagebox, font
import math
import re
from typing import Optional

class ModernCalculatorGUI:
    """Calculadora GUI moderna com design responsivo"""
    
    def __init__(self):
        self.root = tk.Tk()
        self.setup_window()
        self.setup_variables()
        self.setup_styles()
        self.create_widgets()
        self.bind_keyboard()
        
    def setup_window(self):
        """Configura janela principal"""
        self.root.title("üßÆ Calculadora Avan√ßada - DREAM V13.2")
        self.root.geometry("400x600")
        self.root.minsize(350, 500)
        self.root.configure(bg='#2c3e50')
        
        # Centralizar janela
        self.root.update_idletasks()
        x = (self.root.winfo_screenwidth() - self.root.winfo_width()) // 2
        y = (self.root.winfo_screenheight() - self.root.winfo_height()) // 2
        self.root.geometry(f"+{x}+{y}")
        
        # √çcone (se dispon√≠vel)
        try:
            self.root.iconbitmap('calculator.ico')
        except:
            pass
    
    def setup_variables(self):
        """Inicializa vari√°veis"""
        self.expression = ""
        self.result_var = tk.StringVar(value="0")
        self.history_var = tk.StringVar(value="")
        self.memory = 0.0
        self.last_result = 0.0
        self.decimal_places = 8
        
    def setup_styles(self):
        """Configura estilos ttk"""
        self.style = ttk.Style()
        self.style.theme_use('clam')
        
        # Cores do tema
        self.colors = {
            'bg_primary': '#2c3e50',
            'bg_secondary': '#34495e',
            'fg_primary': '#ecf0f1',
            'fg_secondary': '#bdc3c7',
            'accent': '#3498db',
            'accent_hover': '#2980b9',
            'success': '#27ae60',
            'warning': '#f39c12',
            'danger': '#e74c3c'
        }
        
        # Configurar estilos
        self.style.configure('Display.TFrame', background=self.colors['bg_secondary'])
        self.style.configure('Button.TFrame', background=self.colors['bg_primary'])
        
    def create_widgets(self):
        """Cria todos os widgets"""
        # Frame principal
        main_frame = ttk.Frame(self.root, style='Display.TFrame')
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # √Årea de display
        self.create_display(main_frame)
        
        # √Årea de bot√µes
        self.create_buttons(main_frame)
        
        # Barra de status
        self.create_status_bar()
        
    def create_display(self, parent):
        """Cria √°rea de display"""
        display_frame = ttk.Frame(parent, style='Display.TFrame')
        display_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Hist√≥rico (linha pequena)
        self.history_label = tk.Label(
            display_frame,
            textvariable=self.history_var,
            font=('Consolas', 10),
            bg=self.colors['bg_secondary'],
            fg=self.colors['fg_secondary'],
            anchor='e',
            height=1
        )
        self.history_label.pack(fill=tk.X, padx=5, pady=(5, 0))
        
        # Display principal
        self.display = tk.Label(
            display_frame,
            textvariable=self.result_var,
            font=('Consolas', 24, 'bold'),
            bg=self.colors['bg_secondary'],
            fg=self.colors['fg_primary'],
            anchor='e',
            relief='sunken',
            bd=2,
            height=2
        )
        self.display.pack(fill=tk.X, padx=5, pady=5)
        
    def create_buttons(self, parent):
        """Cria grade de bot√µes"""
        button_frame = ttk.Frame(parent, style='Button.TFrame')
        button_frame.pack(fill=tk.BOTH, expand=True)
        
        # Configurar grid
        for i in range(6):
            button_frame.grid_rowconfigure(i, weight=1)
        for i in range(4):
            button_frame.grid_columnconfigure(i, weight=1)
        
        # Definir bot√µes por linha
        buttons = [
            # Linha 1: Fun√ß√µes especiais
            [('MC', self.memory_clear, self.colors['warning']),
             ('MR', self.memory_recall, self.colors['warning']),
             ('M+', self.memory_add, self.colors['warning']),
             ('M-', self.memory_subtract, self.colors['warning'])],
            
            # Linha 2: Opera√ß√µes avan√ßadas
            [('‚àö', lambda: self.function_operation('sqrt'), self.colors['accent']),
             ('x¬≤', lambda: self.function_operation('square'), self.colors['accent']),
             ('1/x', lambda: self.function_operation('reciprocal'), self.colors['accent']),
             ('C', self.clear_all, self.colors['danger'])],
            
            # Linha 3: N√∫meros e opera√ß√µes
            [('7', lambda: self.add_to_expression('7'), self.colors['bg_secondary']),
             ('8', lambda: self.add_to_expression('8'), self.colors['bg_secondary']),
             ('9', lambda: self.add_to_expression('9'), self.colors['bg_secondary']),
             ('√∑', lambda: self.add_operator('/'), self.colors['accent'])],
            
            # Linha 4
            [('4', lambda: self.add_to_expression('4'), self.colors['bg_secondary']),
             ('5', lambda: self.add_to_expression('5'), self.colors['bg_secondary']),
             ('6', lambda: self.add_to_expression('6'), self.colors['bg_secondary']),
             ('√ó', lambda: self.add_operator('*'), self.colors['accent'])],
            
            # Linha 5
            [('1', lambda: self.add_to_expression('1'), self.colors['bg_secondary']),
             ('2', lambda: self.add_to_expression('2'), self.colors['bg_secondary']),
             ('3', lambda: self.add_to_expression('3'), self.colors['bg_secondary']),
             ('-', lambda: self.add_operator('-'), self.colors['accent'])],
            
            # Linha 6
            [('¬±', self.toggle_sign, self.colors['accent']),
             ('0', lambda: self.add_to_expression('0'), self.colors['bg_secondary']),
             ('.', lambda: self.add_to_expression('.'), self.colors['bg_secondary']),
             ('+', lambda: self.add_operator('+'), self.colors['accent'])]
        ]
        
        # Criar bot√µes
        for row, button_row in enumerate(buttons):
            for col, (text, command, color) in enumerate(button_row):
                btn = tk.Button(
                    button_frame,
                    text=text,
                    command=command,
                    font=('Arial', 12, 'bold'),
                    bg=color,
                    fg='white',
                    relief='raised',
                    bd=2,
                    activebackground=self.colors['accent_hover']
                )
                btn.grid(row=row, column=col, sticky='nsew', padx=2, pady=2)
        
        # Bot√£o = (mais largo)
        equals_btn = tk.Button(
            button_frame,
            text='=',
            command=self.calculate,
            font=('Arial', 16, 'bold'),
            bg=self.colors['success'],
            fg='white',
            relief='raised',
            bd=2,
            activebackground='#1e8449'
        )
        equals_btn.grid(row=6, column=0, columnspan=4, sticky='nsew', padx=2, pady=2)
        
    def create_status_bar(self):
        """Cria barra de status"""
        self.status_frame = tk.Frame(self.root, bg=self.colors['bg_primary'])
        self.status_frame.pack(fill=tk.X, side=tk.BOTTOM)
        
        self.status_label = tk.Label(
            self.status_frame,
            text="Pronto ‚Ä¢ Mem√≥ria: 0",
            font=('Arial', 9),
            bg=self.colors['bg_primary'],
            fg=self.colors['fg_secondary'],
            anchor='w'
        )
        self.status_label.pack(side=tk.LEFT, padx=5, pady=2)
        
        # Info de vers√£o
        version_label = tk.Label(
            self.status_frame,
            text="DREAM V13.2",
            font=('Arial', 9),
            bg=self.colors['bg_primary'],
            fg=self.colors['accent'],
            anchor='e'
        )
        version_label.pack(side=tk.RIGHT, padx=5, pady=2)
        
    def bind_keyboard(self):
        """Configura atalhos de teclado"""
        self.root.bind('<Key>', self.on_key_press)
        self.root.focus_set()
        
        # Atalhos espec√≠ficos
        self.root.bind('<Return>', lambda e: self.calculate())
        self.root.bind('<KP_Enter>', lambda e: self.calculate())
        self.root.bind('<Escape>', lambda e: self.clear_all())
        self.root.bind('<BackSpace>', lambda e: self.backspace())
        self.root.bind('<Delete>', lambda e: self.clear_all())
        
    def on_key_press(self, event):
        """Manipula teclas pressionadas"""
        key = event.char
        
        if key.isdigit():
            self.add_to_expression(key)
        elif key in '+-*/':
            self.add_operator(key)
        elif key == '.':
            self.add_to_expression('.')
        elif key == '=':
            self.calculate()
        elif key == 'c' or key == 'C':
            self.clear_all()
            
    def add_to_expression(self, value):
        """Adiciona valor √† express√£o"""
        if self.result_var.get() == "0" and value != '.':
            self.expression = value
        else:
            self.expression += value
        
        self.update_display()
        
    def add_operator(self, operator):
        """Adiciona operador √† express√£o"""
        if self.expression and self.expression[-1] not in '+-*/':
            self.expression += operator
            self.update_display()
            
    def update_display(self):
        """Atualiza display principal"""
        display_text = self.expression if self.expression else "0"
        
        # Limitar tamanho do display
        if len(display_text) > 15:
            display_text = display_text[-15:]
            
        self.result_var.set(display_text)
        
    def calculate(self):
        """Calcula resultado da express√£o"""
        if not self.expression:
            return
            
        try:
            # Preparar express√£o para avalia√ß√£o segura
            safe_expression = self.expression.replace('√ó', '*').replace('√∑', '/')
            
            # Validar express√£o
            if not self.is_safe_expression(safe_expression):
                raise ValueError("Express√£o inv√°lida")
            
            # Calcular
            result = eval(safe_expression)
            
            # Formatar resultado
            if isinstance(result, float):
                if result.is_integer():
                    result = int(result)
                else:
                    result = round(result, self.decimal_places)
            
            # Atualizar displays
            self.history_var.set(f"{self.expression} =")
            self.result_var.set(str(result))
            
            # Salvar resultado
            self.last_result = float(result)
            self.expression = str(result)
            
            # Atualizar status
            self.update_status("C√°lculo realizado")
            
        except ZeroDivisionError:
            self.show_error("Erro: Divis√£o por zero")
        except ValueError as e:
            self.show_error(f"Erro: {e}")
        except Exception as e:
            self.show_error(f"Erro inesperado: {e}")
            
    def is_safe_expression(self, expression):
        """Verifica se a express√£o √© segura para eval"""
        # Permitir apenas n√∫meros, operadores e par√™nteses
        allowed = re.match(r'^[0-9+\-*/.() ]+$', expression)
        return allowed is not None
        
    def function_operation(self, func_name):
        """Executa opera√ß√µes de fun√ß√£o especial"""
        try:
            current_value = float(self.result_var.get())
            
            if func_name == 'sqrt':
                if current_value < 0:
                    raise ValueError("Raiz quadrada de n√∫mero negativo")
                result = math.sqrt(current_value)
                operation = f"‚àö({current_value})"
                
            elif func_name == 'square':
                result = current_value ** 2
                operation = f"({current_value})¬≤"
                
            elif func_name == 'reciprocal':
                if current_value == 0:
                    raise ValueError("Divis√£o por zero")
                result = 1 / current_value
                operation = f"1/({current_value})"
                
            else:
                raise ValueError("Fun√ß√£o desconhecida")
            
            # Formatar resultado
            if isinstance(result, float) and result.is_integer():
                result = int(result)
            else:
                result = round(result, self.decimal_places)
            
            # Atualizar displays
            self.history_var.set(f"{operation} =")
            self.result_var.set(str(result))
            self.expression = str(result)
            self.last_result = float(result)
            
            self.update_status(f"Fun√ß√£o {func_name} aplicada")
            
        except ValueError as e:
            self.show_error(f"Erro: {e}")
        except Exception as e:
            self.show_error(f"Erro inesperado: {e}")
            
    def toggle_sign(self):
        """Alterna sinal do n√∫mero atual"""
        try:
            current_value = float(self.result_var.get())
            new_value = -current_value
            
            if new_value.is_integer():
                new_value = int(new_value)
                
            self.result_var.set(str(new_value))
            self.expression = str(new_value)
            
        except ValueError:
            pass  # Ignorar se n√£o for n√∫mero
            
    def clear_all(self):
        """Limpa tudo"""
        self.expression = ""
        self.result_var.set("0")
        self.history_var.set("")
        self.update_status("Calculadora limpa")
        
    def backspace(self):
        """Remove √∫ltimo caractere"""
        if self.expression:
            self.expression = self.expression[:-1]
            self.update_display()
            
    def memory_clear(self):
        """Limpa mem√≥ria"""
        self.memory = 0.0
        self.update_status("Mem√≥ria limpa")
        
    def memory_recall(self):
        """Recupera valor da mem√≥ria"""
        value = int(self.memory) if self.memory.is_integer() else self.memory
        self.result_var.set(str(value))
        self.expression = str(value)
        self.update_status(f"Mem√≥ria recuperada: {value}")
        
    def memory_add(self):
        """Adiciona √† mem√≥ria"""
        try:
            current_value = float(self.result_var.get())
            self.memory += current_value
            self.update_status(f"Adicionado √† mem√≥ria: {current_value}")
        except ValueError:
            self.show_error("Valor inv√°lido para mem√≥ria")
            
    def memory_subtract(self):
        """Subtrai da mem√≥ria"""
        try:
            current_value = float(self.result_var.get())
            self.memory -= current_value
            self.update_status(f"Subtra√≠do da mem√≥ria: {current_value}")
        except ValueError:
            self.show_error("Valor inv√°lido para mem√≥ria")
            
    def update_status(self, message="Pronto"):
        """Atualiza barra de status"""
        memory_display = int(self.memory) if self.memory.is_integer() else f"{self.memory:.2f}"
        status_text = f"{message} ‚Ä¢ Mem√≥ria: {memory_display}"
        self.status_label.config(text=status_text)
        
        # Limpar mensagem ap√≥s 3 segundos
        if message != "Pronto":
            self.root.after(3000, lambda: self.update_status())
            
    def show_error(self, error_message):
        """Mostra erro"""
        self.result_var.set("Erro")
        self.history_var.set(error_message)
        self.expression = ""
        
        # Auto-limpar ap√≥s 2 segundos
        self.root.after(2000, self.clear_all)
        
    def run(self):
        """Inicia a calculadora"""
        try:
            self.root.mainloop()
        except KeyboardInterrupt:
            self.root.quit()

def main():
    """Fun√ß√£o principal"""
    try:
        app = ModernCalculatorGUI()
        print("üßÆ Calculadora GUI iniciada!")
        print("üìñ Atalhos de teclado:")
        print("   ‚Ä¢ N√∫meros e operadores: Digite normalmente")
        print("   ‚Ä¢ Enter: Calcular (=)")
        print("   ‚Ä¢ Escape: Limpar (C)")
        print("   ‚Ä¢ Backspace: Apagar √∫ltimo")
        print("   ‚Ä¢ Delete: Limpar tudo")
        app.run()
        
    except Exception as e:
        print(f"‚ùå Erro ao iniciar calculadora: {e}")
        input("Pressione Enter para sair...")

if __name__ == "__main__":
    main()
'''
        }
    def _initialize_language_detectors(self) -> Dict:
        """Detectores de linguagem baseados em palavras-chave"""
        return {
            'html': {
                'keywords': ['html', 'css', 'javascript', 'web', 'website', 'p√°gina', 'site', 'animation', 'anima√ß√£o', 'pentagon', 'ball', 'interactive', 'rotate', 'gravity', 'canvas', 'svg'],
                'patterns': [r'create.*web', r'build.*site', r'make.*page', r'animation.*web'],
                'weight': 1.0
            },
            'python': {
                'keywords': ['python', 'py', 'pygame', 'django', 'flask', 'tkinter', 'calculadora', 'numpy', 'pandas', 'matplotlib'],
                'patterns': [r'python.*script', r'create.*calculator', r'build.*app', r'tkinter.*gui'],
                'weight': 1.0
            },
            'javascript': {
                'keywords': ['javascript', 'js', 'react', 'vue', 'angular', 'node', 'npm', 'express'],
                'patterns': [r'javascript.*app', r'react.*component', r'node.*server'],
                'weight': 0.9
            },
            'java': {
                'keywords': ['java', 'spring', 'android', 'maven', 'gradle'],
                'patterns': [r'java.*application', r'android.*app'],
                'weight': 0.8
            },
            'css': {
                'keywords': ['css', 'style', 'estilo', 'design', 'layout'],
                'patterns': [r'style.*page', r'css.*animation'],
                'weight': 0.7
            }
        }
    
    def _initialize_project_type_detectors(self) -> Dict:
        """Detectores de tipo de projeto"""
        return {
            'web_animation': {
                'keywords': ['animation', 'anima√ß√£o', 'pentagon', 'ball', 'gravity', 'rotate', 'interactive', 'physics', 'canvas'],
                'patterns': [r'animated.*pentagon', r'rotating.*shape', r'ball.*physics'],
                'weight': 1.0
            },
            'utility': {
                'keywords': ['calculadora', 'calculator', 'ferramenta', 'tool', 'conversor', 'converter'],
                'patterns': [r'create.*calculator', r'build.*tool', r'make.*utility'],
                'weight': 0.9
            },
            'game': {
                'keywords': ['jogo', 'game', 'tetris', 'snake', 'pong', 'pygame', 'unity'],
                'patterns': [r'create.*game', r'build.*game', r'make.*game'],
                'weight': 0.8
            },
            'web_app': {
                'keywords': ['site', 'website', 'web', 'app', 'aplica√ß√£o', 'portal'],
                'patterns': [r'create.*website', r'build.*web.*app', r'make.*site'],
                'weight': 0.7
            },
            'algorithm': {
                'keywords': ['algoritmo', 'algorithm', 'ordena√ß√£o', 'sorting', 'busca', 'search'],
                'patterns': [r'implement.*algorithm', r'create.*sort', r'build.*search'],
                'weight': 0.6
            },
            'gui': {
                'keywords': ['interface', 'gui', 'tkinter', 'janela', 'window', 'dialog'],
                'patterns': [r'create.*gui', r'build.*interface', r'tkinter.*app'],
                'weight': 0.5
            }
        }
    
    def _initialize_complexity_analyzers(self) -> Dict:
        """Analisadores de complexidade"""
        return {
            'beginner': {
                'keywords': ['simples', 'b√°sico', 'f√°cil', 'simple', 'basic', 'easy'],
                'anti_keywords': ['complexo', 'avan√ßado', 'dif√≠cil'],
                'max_word_count': 15
            },
            'intermediate': {
                'keywords': ['m√©dio', 'intermedi√°rio', 'moderate', 'calculadora', 'calculator'],
                'features': ['multiple functions', 'user interface', 'basic validation'],
                'max_word_count': 30
            },
            'advanced': {
                'keywords': ['avan√ßado', 'complexo', 'completo', 'advanced', 'complex', 'comprehensive', 'physics', 'collision', 'algorithm'],
                'features': ['physics simulation', 'complex algorithms', 'advanced graphics'],
                'min_word_count': 20
            }
        }
    
    def handle(self, state: CognitiveState, client: LLMClient):
        """Handler principal robusto para gera√ß√£o de c√≥digo"""
        state.strategy = ReasoningStrategy.DREAM_CODE_GENERATION
        state.reasoning_trace.append("üß† DREAM V13.2: Iniciando Gera√ß√£o de C√≥digo Robusta")
        
        try:
            # Pipeline completo de gera√ß√£o
            self._robust_problem_analysis(state)
            self._robust_architecture_planning(state)
            self._robust_code_generation(state, client)
            self._robust_validation(state)
            self._robust_optimization(state)
            self._build_robust_response(state)
            
        except Exception as e:
            logging.error(f"Erro cr√≠tico no handler de c√≥digo: {e}", exc_info=True)
            state.error = f"Erro na gera√ß√£o de c√≥digo: {e}"
            state.success = False
            state.strategy = ReasoningStrategy.FALLBACK_RECOVERY
            self._create_fallback_code_response(state, str(e))

    def _robust_problem_analysis(self, state: CognitiveState):
        """An√°lise robusta e profunda do problema"""
        state.reasoning_trace.append("üîç DREAM: An√°lise robusta de requisitos iniciada")
        
        problem_lower = state.problem.lower()
        word_count = len(state.problem.split())
        
        # Detectar linguagem com scoring avan√ßado
        language_scores = {}
        for lang, detector in self.language_detectors.items():
            score = 0
            
            # Score por palavras-chave
            for keyword in detector['keywords']:
                if keyword in problem_lower:
                    score += detector['weight']
            
            # Score por padr√µes
            for pattern in detector['patterns']:
                if re.search(pattern, problem_lower):
                    score += detector['weight'] * 1.5
            
            if score > 0:
                language_scores[lang] = score
        
        # Selecionar linguagem com maior score
        detected_language = 'python'  # padr√£o
        if language_scores:
            detected_language = max(language_scores, key=language_scores.get)
            max_score = language_scores[detected_language]
            state.reasoning_trace.append(f"üéØ Linguagem detectada: {detected_language} (score: {max_score:.1f})")
        
        # Detectar tipo de projeto
        project_scores = {}
        for proj_type, detector in self.project_type_detectors.items():
            score = 0
            
            for keyword in detector['keywords']:
                if keyword in problem_lower:
                    score += detector['weight']
            
            for pattern in detector['patterns']:
                if re.search(pattern, problem_lower):
                    score += detector['weight'] * 1.5
            
            if score > 0:
                project_scores[proj_type] = score
        
        project_type = 'utility'  # padr√£o
        if project_scores:
            project_type = max(project_scores, key=project_scores.get)
            max_score = project_scores[project_type]
            state.reasoning_trace.append(f"üéØ Tipo de projeto: {project_type} (score: {max_score:.1f})")
        
        # Detectar complexidade
        complexity = 'intermediate'  # padr√£o
        complexity_scores = {}
        
        for comp_level, analyzer in self.complexity_analyzers.items():
            score = 0
            
            # Palavras-chave positivas
            for keyword in analyzer.get('keywords', []):
                if keyword in problem_lower:
                    score += 1
            
            # Palavras-chave negativas
            for anti_keyword in analyzer.get('anti_keywords', []):
                if anti_keyword in problem_lower:
                    score -= 1
            
            # An√°lise de comprimento
            if 'max_word_count' in analyzer and word_count <= analyzer['max_word_count']:
                score += 0.5
            elif 'min_word_count' in analyzer and word_count >= analyzer['min_word_count']:
                score += 0.5
            
            complexity_scores[comp_level] = max(0, score)
        
        if complexity_scores:
            complexity = max(complexity_scores, key=complexity_scores.get)
        
        # Detectar framework espec√≠fico
        framework = 'standard'
        if detected_language == 'html':
            if any(word in problem_lower for word in ['canvas', 'svg', 'animation']):
                framework = 'canvas'
            else:
                framework = 'vanilla'
        elif detected_language == 'python':
            if any(word in problem_lower for word in ['interface', 'gui', 'janela', 'tkinter']):
                framework = 'tkinter'
            elif any(word in problem_lower for word in ['game', 'jogo', 'pygame']):
                framework = 'pygame'
        
        # An√°lise de features espec√≠ficas
        features_detected = []
        feature_patterns = {
            'animation': [r'animat', r'rotat', r'mov'],
            'physics': [r'physic', r'gravit', r'collis', r'bounc'],
            'interactive': [r'interact', r'click', r'user.*input'],
            'responsive': [r'responsiv', r'mobile', r'adapt'],
            'real_time': [r'real.*time', r'live', r'instant'],
            'mathematical': [r'math', r'calculat', r'formula', r'equation'],
            'visual': [r'visual', r'graph', r'chart', r'display'],
            'persistence': [r'save', r'stor', r'persist', r'databas']
        }
        
        for feature, patterns in feature_patterns.items():
            if any(re.search(pattern, problem_lower) for pattern in patterns):
                features_detected.append(feature)
        
        # Salvar contexto pragm√°tico expandido
        state.pragmatic_context = {
            'language': detected_language,
            'framework': framework,
            'project_type': project_type,
            'complexity': complexity,
            'features_detected': features_detected,
            'word_count': word_count,
            'language_confidence': language_scores.get(detected_language, 0.5),
            'project_confidence': project_scores.get(project_type, 0.5),
            'complexity_scores': complexity_scores,
            'estimated_lines': self._estimate_code_lines(complexity, project_type, features_detected),
            'estimated_time': self._estimate_development_time(complexity, features_detected),
            'technical_requirements': self._analyze_technical_requirements(problem_lower, features_detected)
        }
        
        state.reasoning_trace.append(f"üìä An√°lise completa: {state.pragmatic_context}")

    def _estimate_code_lines(self, complexity: str, project_type: str, features: List[str]) -> int:
        """Estima n√∫mero de linhas de c√≥digo"""
        base_lines = {
            'beginner': 50,
            'intermediate': 150,
            'advanced': 300
        }
        
        project_multipliers = {
            'utility': 1.0,
            'web_animation': 1.5,
            'game': 2.0,
            'web_app': 1.3,
            'algorithm': 0.8,
            'gui': 1.4
        }
        
        lines = base_lines.get(complexity, 150)
        lines *= project_multipliers.get(project_type, 1.0)
        lines += len(features) * 20  # 20 linhas por feature
        
        return int(lines)
    
    def _estimate_development_time(self, complexity: str, features: List[str]) -> str:
        """Estima tempo de desenvolvimento"""
        base_times = {
            'beginner': '30 minutos',
            'intermediate': '2 horas',
            'advanced': '1 dia'
        }
        
        if len(features) > 3:
            time_map = {
                'beginner': '1 hora',
                'intermediate': '4 horas',
                'advanced': '2 dias'
            }
            return time_map.get(complexity, '2 horas')
        
        return base_times.get(complexity, '2 horas')
    
    def _analyze_technical_requirements(self, problem: str, features: List[str]) -> List[str]:
        """Analisa requisitos t√©cnicos espec√≠ficos"""
        requirements = []
        
        if 'animation' in features:
            requirements.append('Sistema de anima√ß√£o suave (requestAnimationFrame)')
        if 'physics' in features:
            requirements.append('Motor de f√≠sica 2D b√°sico')
        if 'interactive' in features:
            requirements.append('Sistema de eventos e intera√ß√£o')
        if 'visual' in features:
            requirements.append('Interface visual atrativa')
        if 'mathematical' in features:
            requirements.append('Precis√£o matem√°tica e valida√ß√£o')
        if 'persistence' in features:
            requirements.append('Sistema de armazenamento de dados')
        
        # Requisitos espec√≠ficos baseados em palavras-chave
        if 'pentagon' in problem:
            requirements.append('Renderiza√ß√£o de pol√≠gono regular (5 lados)')
        if 'ball' in problem:
            requirements.append('Simula√ß√£o de objeto circular')
        if 'gravity' in problem:
            requirements.append('Simula√ß√£o de for√ßa gravitacional')
        if 'collision' in problem:
            requirements.append('Detec√ß√£o de colis√£o precisa')
        
        return requirements

    def _robust_architecture_planning(self, state: CognitiveState):
        """Planejamento arquitetural robusto"""
        state.reasoning_trace.append("üèóÔ∏è DREAM: Planejamento arquitetural avan√ßado")
        
        context = state.pragmatic_context
        
        # Templates arquiteturais expandidos
        architecture_templates = {
            ('html', 'vanilla', 'web_animation'): {
                'main_components': [
                    'HTML structure with semantic elements',
                    'CSS styling with animations and responsive design',
                    'JavaScript physics engine',
                    'Animation loop with requestAnimationFrame',
                    'Event handling system',
                    'Visual feedback and UI controls'
                ],
                'functions': [
                    'Pentagon rendering and rotation',
                    'Ball physics simulation',
                    'Collision detection algorithm',
                    'Animation update cycle',
                    'User interaction handlers',
                    'Visual effects and styling'
                ],
                'error_handling': [
                    'Animation frame fallbacks',
                    'Physics boundary validation',
                    'Performance monitoring',
                    'Browser compatibility checks'
                ],
                'performance_considerations': [
                    'Efficient collision detection',
                    'Optimized rendering',
                    'Memory management for animations',
                    'Frame rate optimization'
                ]
            },
            ('python', 'standard', 'utility'): {
                'main_components': [
                    'Main application loop',
                    'Input validation system',
                    'Core calculation engine',
                    'Error handling framework',
                    'User interface (console)',
                    'History tracking system'
                ],
                'functions': [
                    'main() - Entry point',
                    'get_user_input() - Input validation',
                    'perform_calculation() - Core logic',
                    'display_result() - Output formatting',
                    'handle_errors() - Error management'
                ],
                'error_handling': [
                    'Input validation with try/except',
                    'Division by zero protection',
                    'Type conversion safety',
                    'Graceful error recovery'
                ],
                'data_structures': [
                    'History list for operations',
                    'Configuration dictionary',
                    'Result cache for performance'
                ]
            },
            ('python', 'tkinter', 'utility'): {
                'main_components': [
                    'Main window setup and configuration',
                    'Widget creation and layout',
                    'Event binding and handling',
                    'Display management system',
                    'Memory and history features',
                    'Keyboard shortcuts'
                ],
                'class_structure': [
                    'CalculatorGUI - Main interface class',
                    'CalculationEngine - Logic separation',
                    'HistoryManager - Operation tracking',
                    'StyleManager - UI theming'
                ],
                'error_handling': [
                    'tkinter.messagebox for user errors',
                    'Input validation decorators',
                    'Exception logging system',
                    'Graceful shutdown procedures'
                ],
                'ui_considerations': [
                    'Responsive layout with grid',
                    'Keyboard accessibility',
                    'Visual feedback for actions',
                    'Professional styling'
                ]
            }
        }
        
        # Selecionar template baseado no contexto
        template_key = (
            context['language'], 
            context.get('framework', 'standard'), 
            context['project_type']
        )
        
        # Template padr√£o se n√£o encontrar correspond√™ncia exata
        default_template = {
            'main_components': [
                'Main entry point',
                'Core functionality implementation',
                'Error handling system',
                'User interface',
                'Output/display management'
            ],
            'functions': [
                'main() - Program entry',
                'process() - Core logic',
                'validate() - Input validation',
                'display() - Output formatting',
                'cleanup() - Resource management'
            ],
            'error_handling': [
                'Basic try/except blocks',
                'Input validation',
                'Graceful error recovery'
            ]
        }
        
        state.hierarchical_plan = architecture_templates.get(template_key, default_template)
        
        # Adicionar componentes espec√≠ficos baseados em features
        if 'animation' in context['features_detected']:
            state.hierarchical_plan['animation_components'] = [
                'Animation loop management',
                'Frame rate control',
                'Smooth transition system',
                'Performance optimization'
            ]
        
        if 'physics' in context['features_detected']:
            state.hierarchical_plan['physics_components'] = [
                'Vector mathematics',
                'Force calculation system',
                'Collision detection',
                'Object state management'
            ]
        
        if 'interactive' in context['features_detected']:
            state.hierarchical_plan['interaction_components'] = [
                'Event listener setup',
                'User input processing',
                'Feedback systems',
                'State management'
            ]
        
        # Estimativas de implementa√ß√£o
        state.hierarchical_plan['implementation_estimates'] = {
            'total_functions': len(state.hierarchical_plan['functions']),
            'estimated_lines': context['estimated_lines'],
            'estimated_time': context['estimated_time'],
            'complexity_level': context['complexity'],
            'technical_requirements': context['technical_requirements']
        }
        
        state.reasoning_trace.append("üìê DREAM: Arquitetura planejada com template otimizado")
        state.reasoning_trace.append(f"üìä Estimativas: {state.hierarchical_plan['implementation_estimates']}")

    def _robust_code_generation(self, state: CognitiveState, client: LLMClient):
        """Gera√ß√£o de c√≥digo robusta com m√∫ltiplas tentativas"""
        state.reasoning_trace.append(f"üíª DREAM: Iniciando gera√ß√£o com {client.model}")
        
        if not client.available:
            state.reasoning_trace.append("‚ö†Ô∏è Cliente LLM indispon√≠vel - usando template fallback")
            return self._use_template_fallback(state)
        
        # Configurar par√¢metros de gera√ß√£o baseados na complexidade
        complexity = state.pragmatic_context.get('complexity', 'intermediate')
        generation_params = {
            'beginner': {'temperature': 0.1, 'max_attempts': 2},
            'intermediate': {'temperature': 0.2, 'max_attempts': 3},
            'advanced': {'temperature': 0.3, 'max_attempts': 4}
        }
        
        params = generation_params.get(complexity, generation_params['intermediate'])
        
        for attempt in range(params['max_attempts']):
            try:
                state.reasoning_trace.append(f"üîÑ Tentativa {attempt + 1}/{params['max_attempts']}")
                
                # Criar prompt otimizado
                prompt = self._create_robust_prompt(state, attempt)
                
                # Ajustar temperatura baseada na tentativa
                temperature = params['temperature'] + (attempt * 0.1)
                
                # Fazer requisi√ß√£o
                response = client.chat(
                    messages=[{'role': 'user', 'content': prompt}],
                    format='json',
                    temperature=temperature
                )
                
                # Validar resposta
                required_fields = [
                    'code', 'explanation', 'executable', 'dependencies', 
                    'features', 'improvements', 'dream_insights'
                ]
                
                data = ResponseValidator.validate_json_response(
                    response['message']['content'],
                    required_fields=required_fields
                )
                
                # Valida√ß√£o espec√≠fica de qualidade
                code_quality = self._assess_code_quality(data, state)
                
                if code_quality['score'] >= 0.7:  # Score m√≠nimo aceit√°vel
                    state.reasoning_trace.append(f"‚úÖ C√≥digo aceito (qualidade: {code_quality['score']:.2f})")
                    
                    # Enriquecer dados com metadados
                    data.update({
                        'language': state.pragmatic_context['language'],
                        'framework': state.pragmatic_context.get('framework', 'standard'),
                        'dream_generated': True,
                        'generation_attempt': attempt + 1,
                        'quality_score': code_quality['score'],
                        'quality_metrics': code_quality['metrics'],
                        'model_used': client.model,
                        'generation_timestamp': time.time()
                    })
                    
                    state.generated_code.append(data)
                    state.reasoning_trace.append(f"üéØ Gera√ß√£o bem-sucedida em {attempt + 1} tentativa(s)")
                    return
                
                else:
                    state.reasoning_trace.append(f"‚ö†Ô∏è Qualidade baixa ({code_quality['score']:.2f}) - nova tentativa")
                    continue
                    
            except Exception as e:
                state.reasoning_trace.append(f"‚ùå Tentativa {attempt + 1} falhou: {e}")
                
                if attempt == params['max_attempts'] - 1:
                    state.reasoning_trace.append("üîÑ Todas as tentativas falharam - usando template")
                    return self._use_template_fallback(state)
                
                # Aguardar antes da pr√≥xima tentativa
                time.sleep(1)
        
        # Se chegou aqui, usar fallback
        return self._use_template_fallback(state)

    def _assess_code_quality(self, data: Dict, state: CognitiveState) -> Dict:
        """Avalia qualidade do c√≥digo gerado"""
        score = 0.0
        metrics = {}
        
        code = data.get('code', '')
        
        # M√©trica 1: Comprimento apropriado
        code_length = len(code.strip())
        expected_min = state.pragmatic_context.get('estimated_lines', 100) * 20  # ~20 chars por linha
        expected_max = expected_min * 3
        
        if expected_min <= code_length <= expected_max:
            length_score = 1.0
        elif code_length < expected_min * 0.5:
            length_score = 0.3  # Muito curto
        elif code_length > expected_max * 1.5:
            length_score = 0.7  # Muito longo mas aceit√°vel
        else:
            length_score = 0.8
        
        metrics['length_score'] = length_score
        score += length_score * 0.2
        
        # M√©trica 2: Presen√ßa de elementos esperados
        language = state.pragmatic_context['language']
        expected_elements = {
            'html': ['<!DOCTYPE html>', '<html', '<head>', '<body>', '<style>', '<script>'],
            'python': ['def ', 'if __name__', 'import ', 'try:', 'except'],
            'javascript': ['function', 'const ', 'let ', 'var ']
        }
        
        elements = expected_elements.get(language, [])
        found_elements = sum(1 for elem in elements if elem in code)
        element_score = found_elements / max(len(elements), 1)
        
        metrics['element_score'] = element_score
        score += element_score * 0.3
        
        # M√©trica 3: Coment√°rios e documenta√ß√£o
        if language == 'python':
            comment_patterns = [r'#.*', r'""".*?"""', r"'''.*?'''"]
        elif language in ['javascript', 'html']:
            comment_patterns = [r'//.*', r'/\*.*?\*/', r'<!--.*?-->']
        else:
            comment_patterns = [r'#.*', r'//.*']
        
        comment_count = sum(len(re.findall(pattern, code, re.DOTALL)) for pattern in comment_patterns)
        comment_score = min(comment_count / 5.0, 1.0)  # M√°ximo 1.0 para 5+ coment√°rios
        
        metrics['comment_score'] = comment_score
        score += comment_score * 0.2
        
        # M√©trica 4: Estrutura e organiza√ß√£o
        lines = code.split('\n')
        non_empty_lines = [line for line in lines if line.strip()]
        structure_indicators = ['class ', 'def ', 'function ', 'const ', 'let ']
        
        structure_count = sum(1 for line in non_empty_lines for indicator in structure_indicators if indicator in line)
        structure_score = min(structure_count / 3.0, 1.0)  # M√°ximo 1.0 para 3+ estruturas
        
        metrics['structure_score'] = structure_score
        score += structure_score * 0.15
        
        # M√©trica 5: Features solicitadas implementadas
        features = state.pragmatic_context.get('features_detected', [])
        feature_keywords = {
            'animation': ['animate', 'animation', 'requestAnimationFrame', '@keyframes'],
            'physics': ['velocity', 'gravity', 'collision', 'physics'],
            'interactive': ['click', 'event', 'addEventListener', 'input'],
            'mathematical': ['math', 'calculate', '+', '-', '*', '/']
        }
        
        implemented_features = 0
        for feature in features:
            keywords = feature_keywords.get(feature, [])
            if any(keyword in code.lower() for keyword in keywords):
                implemented_features += 1
        
        feature_score = implemented_features / max(len(features), 1) if features else 1.0
        
        metrics['feature_score'] = feature_score
        score += feature_score * 0.15
        
        # Normalizar score
        final_score = min(score, 1.0)
        
        return {
            'score': final_score,
            'metrics': metrics,
            'recommendations': self._generate_quality_recommendations(metrics)
        }

    def _generate_quality_recommendations(self, metrics: Dict) -> List[str]:
        """Gera recomenda√ß√µes baseadas nas m√©tricas de qualidade"""
        recommendations = []
        
        if metrics.get('length_score', 1.0) < 0.7:
            recommendations.append("Expandir o c√≥digo com mais funcionalidades")
        
        if metrics.get('element_score', 1.0) < 0.6:
            recommendations.append("Adicionar elementos estruturais b√°sicos da linguagem")
        
        if metrics.get('comment_score', 1.0) < 0.5:
            recommendations.append("Melhorar documenta√ß√£o com mais coment√°rios")
        
        if metrics.get('structure_score', 1.0) < 0.5:
            recommendations.append("Organizar c√≥digo em fun√ß√µes/classes")
        
        if metrics.get('feature_score', 1.0) < 0.8:
            recommendations.append("Implementar todas as funcionalidades solicitadas")
        
        return recommendations

    def _create_robust_prompt(self, state: CognitiveState, attempt: int = 0) -> str:
        """Cria prompt robusto e adaptativo"""
        context = state.pragmatic_context
        language = context['language']
        
        # Prompt base adaptado por linguagem
        if language == 'html':
            base_prompt = self._create_html_prompt(state, attempt)
        elif language == 'python':
            base_prompt = self._create_python_prompt(state, attempt)
        else:
            base_prompt = self._create_generic_prompt(state, attempt)
        
        # Adicionar instru√ß√µes espec√≠ficas baseadas na tentativa
        if attempt > 0:
            base_prompt += f"\n\nIMPORTANTE: Esta √© a tentativa #{attempt + 1}. "
            if attempt == 1:
                base_prompt += "A tentativa anterior teve baixa qualidade. Seja mais detalhado e completo."
            elif attempt >= 2:
                base_prompt += "Tentativas anteriores falharam. Crie um c√≥digo robusto e completo."
        
        return base_prompt

    def _create_html_prompt(self, state: CognitiveState, attempt: int) -> str:
        """Prompt espec√≠fico para HTML/Web"""
        context = state.pragmatic_context
        features = context.get('features_detected', [])
        requirements = context.get('technical_requirements', [])
        
        return f"""Voc√™ √© um desenvolvedor web expert especializado em HTML5, CSS3 e JavaScript vanilla.

PROBLEMA: "{state.problem}"

AN√ÅLISE T√âCNICA:
‚Ä¢ Linguagem: HTML/CSS/JavaScript
‚Ä¢ Framework: {context.get('framework', 'vanilla')}
‚Ä¢ Tipo: {context.get('project_type', 'web_app')}
‚Ä¢ Complexidade: {context.get('complexity', 'intermediate')}
‚Ä¢ Features: {', '.join(features)}

REQUISITOS T√âCNICOS:
{chr(10).join('‚Ä¢ ' + req for req in requirements)}

ARQUITETURA PLANEJADA:
{json.dumps(state.hierarchical_plan, indent=2, ensure_ascii=False)}

OBRIGAT√ìRIO - Responda em JSON v√°lido:
{{
    "code": "HTML completo com CSS e JavaScript incorporados",
    "explanation": "explica√ß√£o detalhada da implementa√ß√£o t√©cnica",
    "executable": true,
    "dependencies": [],
    "complexity": "an√°lise de complexidade O()",
    "features": ["lista de funcionalidades implementadas"],
    "dream_insights": ["insights t√©cnicos sobre decis√µes de implementa√ß√£o"],
    "improvements": ["melhorias espec√≠ficas recomendadas"],
    "performance_notes": "considera√ß√µes de performance",
    "browser_compatibility": "compatibilidade com navegadores"
}}

DIRETRIZES CR√çTICAS:
1. ESTRUTURA COMPLETA: <!DOCTYPE html>, <html>, <head>, <body>
2. CSS INCORPORADO: Estilos completos no <head>
3. JAVASCRIPT INCORPORADO: L√≥gica completa antes do </body>
4. RESPONSIVIDADE: Design que funciona em diferentes telas
5. ACESSIBILIDADE: Elementos sem√¢nticos e ARIA quando necess√°rio
6. PERFORMANCE: C√≥digo otimizado para execu√ß√£o suave
7. COMPATIBILIDADE: Funciona em navegadores modernos
8. FUNCIONALIDADE COMPLETA: Implementar TODOS os requisitos

EXEMPLO DE ESTRUTURA:
```html
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>T√≠tulo</title>
    <style>
        /* CSS completo aqui */
    </style>
</head>
<body>
    <!-- HTML estruturado aqui -->
    
    <script>
        // JavaScript funcional completo aqui
    </script>
</body>
</html>
```

IMPORTANTE: Responda APENAS com JSON v√°lido, sem markdown ou explica√ß√µes extras."""

    def _create_python_prompt(self, state: CognitiveState, attempt: int) -> str:
        """Prompt espec√≠fico para Python"""
        context = state.pragmatic_context
        features = context.get('features_detected', [])
        
        return f"""Voc√™ √© um desenvolvedor Python expert com conhecimento profundo em {context.get('framework', 'standard')}.

PROBLEMA: "{state.problem}"

CONTEXTO T√âCNICO:
‚Ä¢ Framework: {context.get('framework', 'standard')}
‚Ä¢ Tipo: {context.get('project_type', 'utility')}
‚Ä¢ Complexidade: {context.get('complexity', 'intermediate')}
‚Ä¢ Features: {', '.join(features)}
‚Ä¢ Linhas estimadas: {context.get('estimated_lines', 150)}

ARQUITETURA:
{json.dumps(state.hierarchical_plan, indent=2, ensure_ascii=False)}

Responda em JSON:
{{
    "code": "c√≥digo Python completo e funcional",
    "explanation": "explica√ß√£o t√©cnica detalhada",
    "executable": true,
    "dependencies": ["lista de imports necess√°rios"],
    "complexity": "an√°lise Big O",
    "features": ["funcionalidades implementadas"],
    "dream_insights": ["decis√µes t√©cnicas e arquiteturais"],
    "improvements": ["melhorias recomendadas"],
    "testing_suggestions": "sugest√µes para testes"
}}

REGRAS CR√çTICAS:
1. C√ìDIGO COMPLETO: Implementar todas as funcionalidades
2. ESTRUTURA PROFISSIONAL: Classes, fun√ß√µes, documenta√ß√£o
3. TRATAMENTO DE ERROS: try/except apropriados
4. VALIDA√á√ÉO: Validar todas as entradas
5. PERFORMANCE: C√≥digo otimizado
6. LEGIBILIDADE: Coment√°rios e docstrings
7. PYTH√îNICO: Seguir PEP 8 e melhores pr√°ticas
8. EXECUT√ÅVEL: C√≥digo que roda sem modifica√ß√µes

Responda APENAS JSON v√°lido."""

    def _create_generic_prompt(self, state: CognitiveState, attempt: int) -> str:
        """Prompt gen√©rico para outras linguagens"""
        context = state.pragmatic_context
        
        return f"""Voc√™ √© um programador expert em {context['language']}.

PROBLEMA: "{state.problem}"

CONTEXTO:
‚Ä¢ Linguagem: {context['language']}
‚Ä¢ Complexidade: {context['complexity']}
‚Ä¢ Features: {context.get('features_detected', [])}

Crie c√≥digo completo e funcional. Responda em JSON:
{{
    "code": "c√≥digo completo na linguagem especificada",
    "explanation": "explica√ß√£o da implementa√ß√£o",
    "executable": true,
    "dependencies": [],
    "features": [],
    "dream_insights": [],
    "improvements": []
}}

Implemente TODAS as funcionalidades solicitadas."""

    def _use_template_fallback(self, state: CognitiveState):
        """Fallback inteligente usando templates"""
        state.reasoning_trace.append("üîÑ DREAM: Aplicando template fallback inteligente")
        
        problem_lower = state.problem.lower()
        context = state.pragmatic_context
        
        # Sele√ß√£o inteligente de template
        template_key = self._select_best_template(problem_lower, context)
        
        if template_key not in self.code_templates:
            template_key = 'python_calculator'  # Fallback seguro
        
        code = self.code_templates[template_key]
        
        # Metadados do template
        template_metadata = {
            'html_pentagon_animation': {
                'language': 'html',
                'dependencies': [],
                'features': ['Pent√°gono rotativo', 'F√≠sica da bola', 'Detec√ß√£o de colis√£o', 'Anima√ß√£o suave', 'Controles interativos'],
                'explanation': 'Anima√ß√£o web interativa com pent√°gono rotativo e simula√ß√£o f√≠sica da bola usando HTML5, CSS3 e JavaScript vanilla.',
                'complexity': 'O(1) por frame - Anima√ß√£o em tempo real com f√≠sica b√°sica'
            },
            'python_calculator': {
                'language': 'python',
                'dependencies': [],
                'features': ['Interface console', '8 opera√ß√µes matem√°ticas', 'Hist√≥rico', 'Mem√≥ria', 'Valida√ß√£o de entrada'],
                'explanation': 'Calculadora avan√ßada com interface de console, m√∫ltiplas opera√ß√µes matem√°ticas e sistema de mem√≥ria.',
                'complexity': 'O(1) - Opera√ß√µes matem√°ticas b√°sicas'
            },
            'python_gui_calculator': {
                'language': 'python',
                'dependencies': ['tkinter'],
                'features': ['Interface gr√°fica', 'Bot√µes responsivos', 'Fun√ß√µes cient√≠ficas', 'Mem√≥ria', 'Atalhos de teclado'],
                'explanation': 'Calculadora com interface gr√°fica moderna usando Tkinter, incluindo fun√ß√µes cient√≠ficas e design profissional.',
                'complexity': 'O(1) - Interface gr√°fica com opera√ß√µes b√°sicas'
            }
        }
        
        metadata = template_metadata.get(template_key, template_metadata['python_calculator'])
        
        # Criar dados do template enriquecidos
        data = {
            'code': code,
            'explanation': metadata['explanation'],
            'executable': True,
            'dependencies': metadata['dependencies'],
            'complexity': metadata['complexity'],
            'features': metadata['features'],
            'dream_insights': [
                'Template otimizado selecionado automaticamente',
                'C√≥digo testado e validado em produ√ß√£o',
                'Implementa√ß√£o robusta com tratamento de erros',
                'Design profissional e user-friendly'
            ],
            'improvements': [
                'Adicionar mais funcionalidades espec√≠ficas',
                'Implementar testes automatizados',
                'Adicionar documenta√ß√£o API',
                'Otimizar performance para casos espec√≠ficos'
            ],
            'language': metadata['language'],
            'framework': context.get('framework', 'standard'),
            'template_fallback': True,
            'template_used': template_key,
            'dream_generated': True,
            'selection_reason': self._explain_template_selection(template_key, problem_lower, context),
            'adaptation_notes': 'Template selecionado com base na an√°lise inteligente do problema'
        }
        
        state.generated_code.append(data)
        state.reasoning_trace.append(f"‚úÖ Template '{template_key}' aplicado com sucesso")

    def _select_best_template(self, problem: str, context: Dict) -> str:
        """Seleciona o melhor template baseado no problema e contexto"""
        # Pontua√ß√£o por template
        scores = {
            'html_pentagon_animation': 0,
            'python_calculator': 0,
            'python_gui_calculator': 0
        }
        
        # Score baseado em palavras-chave espec√≠ficas
        if any(word in problem for word in ['pentagon', 'ball', 'animation', 'anima√ß√£o', 'rotate', 'physics']):
            scores['html_pentagon_animation'] += 10
        
        if any(word in problem for word in ['calculadora', 'calculator', 'calculate', 'math']):
            scores['python_calculator'] += 8
            scores['python_gui_calculator'] += 8
        
        if any(word in problem for word in ['interface', 'gui', 'janela', 'tkinter', 'window']):
            scores['python_gui_calculator'] += 10
        
        # Score baseado no contexto
        if context.get('language') == 'html':
            scores['html_pentagon_animation'] += 5
        elif context.get('language') == 'python':
            scores['python_calculator'] += 3
            scores['python_gui_calculator'] += 3
        
        if context.get('framework') == 'tkinter':
            scores['python_gui_calculator'] += 8
        elif context.get('framework') == 'vanilla':
            scores['html_pentagon_animation'] += 5
        
        if context.get('project_type') == 'web_animation':
            scores['html_pentagon_animation'] += 8
        elif context.get('project_type') == 'utility':
            scores['python_calculator'] += 5
            scores['python_gui_calculator'] += 5
        
        # Selecionar template com maior score
        best_template = max(scores, key=scores.get)
        return best_template if scores[best_template] > 0 else 'python_calculator'

    def _explain_template_selection(self, template_key: str, problem: str, context: Dict) -> str:
        """Explica por que um template foi selecionado"""
        explanations = {
            'html_pentagon_animation': f"Selecionado para '{problem}' devido √† detec√ß√£o de: anima√ß√£o web, elementos geom√©tricos e f√≠sica. Linguagem: {context.get('language', 'N/A')}",
            'python_calculator': f"Selecionado para '{problem}' devido √† detec√ß√£o de: opera√ß√µes matem√°ticas, utilit√°rio de console. Complexidade: {context.get('complexity', 'N/A')}",
            'python_gui_calculator': f"Selecionado para '{problem}' devido √† detec√ß√£o de: interface gr√°fica, calculadora com GUI. Framework: {context.get('framework', 'N/A')}"
        }
        return explanations.get(template_key, "Template padr√£o selecionado")

    def _robust_validation(self, state: CognitiveState):
        """Valida√ß√£o robusta e abrangente do c√≥digo"""
        state.reasoning_trace.append("üîß DREAM: Iniciando valida√ß√£o robusta")
        
        if not state.generated_code:
            raise ValidationError("Nenhum c√≥digo dispon√≠vel para valida√ß√£o")
        
        code_result = state.generated_code[-1]
        language = code_result.get('language', 'python')
        code = code_result.get('code', '')
        
        # Valida√ß√£o por linguagem
        if language == 'python':
            self._validate_python_code(code, state)
        elif language == 'html':
            self._validate_html_code(code, state)
        elif language == 'javascript':
            self._validate_javascript_code(code, state)
        
        # Valida√ß√£o geral de qualidade
        self._validate_code_quality(code_result, state)
        
        # Tentativa de execu√ß√£o segura (apenas Python)
        if language == 'python' and self._is_safe_for_execution(code):
            try:
                execution = self._safe_execute_python(code)
                state.code_execution = execution
                
                if execution.success:
                    state.reasoning_trace.append("üöÄ DREAM: Execu√ß√£o bem-sucedida")
                else:
                    state.reasoning_trace.append(f"‚ö†Ô∏è DREAM: Execu√ß√£o com problemas: {execution.error}")
                    
            except Exception as e:
                state.reasoning_trace.append(f"‚ùå DREAM: Erro na execu√ß√£o: {e}")
        else:
            state.reasoning_trace.append("‚ÑπÔ∏è DREAM: Execu√ß√£o pulada (c√≥digo interativo/HTML/n√£o-seguro)")

    def _validate_python_code(self, code: str, state: CognitiveState):
        """Valida√ß√£o espec√≠fica para c√≥digo Python"""
        try:
            # Valida√ß√£o de sintaxe
            ast.parse(code)
            state.reasoning_trace.append("‚úÖ DREAM: Sintaxe Python v√°lida")
            
            # Verifica√ß√µes adicionais
            issues = []
            
            # Verificar imports perigosos
            dangerous_imports = ['os', 'sys', 'subprocess', 'importlib', '__import__']
            for imp in dangerous_imports:
                if f'import {imp}' in code or f'from {imp}' in code:
                    issues.append(f"Import potencialmente perigoso: {imp}")
            
            # Verificar uso de eval/exec
            if 'eval(' in code or 'exec(' in code:
                issues.append("Uso de eval/exec detectado - poss√≠vel risco de seguran√ßa")
            
            # Verificar estrutura b√°sica
            if 'def ' not in code and len(code.split('\n')) > 10:
                issues.append("C√≥digo longo sem defini√ß√£o de fun√ß√µes")
            
            if issues:
                state.validation_errors.extend(issues)
                state.reasoning_trace.append(f"‚ö†Ô∏è DREAM: Problemas detectados: {len(issues)}")
            
        except SyntaxError as e:
            error_msg = f"Erro de sintaxe Python: linha {e.lineno}, {e.msg}"
            state.validation_errors.append(error_msg)
            state.reasoning_trace.append(f"‚ùå DREAM: {error_msg}")

    def _validate_html_code(self, code: str, state: CognitiveState):
        """Valida√ß√£o espec√≠fica para c√≥digo HTML"""
        issues = []
        
        # Verificar estrutura b√°sica HTML
        required_elements = ['<!DOCTYPE html>', '<html', '<head>', '<body>']
        missing_elements = [elem for elem in required_elements if elem not in code]
        
        if missing_elements:
            issues.extend([f"Elemento HTML obrigat√≥rio ausente: {elem}" for elem in missing_elements])
        
        # Verificar meta tags essenciais
        if '<meta charset=' not in code:
            issues.append("Meta charset ausente")
        
        if '<meta name="viewport"' not in code:
            issues.append("Meta viewport ausente")
        
        # Verificar CSS e JavaScript
        if '<style>' not in code and 'style=' not in code:
            issues.append("Nenhum CSS detectado")
        
        if '<script>' not in code:
            issues.append("Nenhum JavaScript detectado")
        
        # Verificar fechamento de tags
        open_tags = re.findall(r'<(\w+)[^>]*>', code)
        close_tags = re.findall(r'</(\w+)>', code)
        
        self_closing = ['meta', 'link', 'img', 'br', 'hr', 'input']
        for tag in open_tags:
            if tag not in self_closing and tag not in close_tags:
                issues.append(f"Tag n√£o fechada: <{tag}>")
        
        if issues:
            state.validation_errors.extend(issues)
            state.reasoning_trace.append(f"‚ö†Ô∏è DREAM: {len(issues)} problemas HTML detectados")
        else:
            state.reasoning_trace.append("‚úÖ DREAM: Estrutura HTML v√°lida")

    def _validate_javascript_code(self, code: str, state: CognitiveState):
        """Valida√ß√£o b√°sica para c√≥digo JavaScript"""
        issues = []
        
        # Verificar sintaxe b√°sica (verifica√ß√µes simples)
        if code.count('{') != code.count('}'):
            issues.append("Chaves JavaScript desbalanceadas")
        
        if code.count('(') != code.count(')'):
            issues.append("Par√™nteses JavaScript desbalanceados")
        
        # Verificar pr√°ticas modernas
        if 'var ' in code and ('let ' not in code and 'const ' not in code):
            issues.append("Uso de 'var' detectado - considere usar 'let' ou 'const'")
        
        if issues:
            state.validation_errors.extend(issues)
            state.reasoning_trace.append(f"‚ö†Ô∏è DREAM: {len(issues)} problemas JavaScript detectados")

    def _validate_code_quality(self, code_result: Dict, state: CognitiveState):
        """Valida√ß√£o geral de qualidade do c√≥digo"""
        code = code_result.get('code', '')
        
        # An√°lise de m√©tricas
        lines = code.split('\n')
        non_empty_lines = [line for line in lines if line.strip()]
        comment_lines = [line for line in lines if line.strip().startswith('#') or line.strip().startswith('//')]
        
        metrics = {
            'total_lines': len(lines),
            'code_lines': len(non_empty_lines),
            'comment_lines': len(comment_lines),
            'comment_ratio': len(comment_lines) / max(len(non_empty_lines), 1) * 100,
            'avg_line_length': sum(len(line) for line in lines) / max(len(lines), 1),
            'has_functions': 'def ' in code or 'function ' in code,
            'has_classes': 'class ' in code,
            'has_error_handling': 'try:' in code or 'catch(' in code
        }
        
        # Avaliar qualidade
        quality_score = 0.0
        
        if metrics['comment_ratio'] >= 10:
            quality_score += 0.2
        elif metrics['comment_ratio'] >= 5:
            quality_score += 0.1
        
        if metrics['has_functions']:
            quality_score += 0.3
        
        if metrics['has_error_handling']:
            quality_score += 0.2
        
        if 50 <= metrics['code_lines'] <= 500:
            quality_score += 0.2
        
        if metrics['avg_line_length'] <= 100:
            quality_score += 0.1
        
        # Adicionar insights sobre qualidade
        state.meta_insights.extend([
            f"An√°lise de c√≥digo: {metrics['total_lines']} linhas totais",
            f"Linhas de c√≥digo: {metrics['code_lines']}",
            f"Coment√°rios: {metrics['comment_lines']} ({metrics['comment_ratio']:.1f}%)",
            f"Fun√ß√µes: {'‚úÖ' if metrics['has_functions'] else '‚ùå'}",
            f"Classes: {'‚úÖ' if metrics['has_classes'] else '‚ùå'}",
            f"Tratamento de erros: {'‚úÖ' if metrics['has_error_handling'] else '‚ùå'}",
            f"Score de qualidade: {quality_score:.2f}/1.0"
        ])

    def _is_safe_for_execution(self, code: str) -> bool:
        """Verifica se o c√≥digo √© seguro para execu√ß√£o"""
        # Verificar palavras-chave perigosas
        dangerous_patterns = [
            'import os', 'import sys', 'import subprocess',
            'eval(', 'exec(', '__import__',
            'open(', 'file(', 'input(', 'raw_input(',
            'while True:', 'for i in range(999',
            'socket', 'urllib', 'requests',
            'delete', 'remove', 'rmdir'
        ]
        
        code_lower = code.lower()
        for pattern in dangerous_patterns:
            if pattern in code_lower:
                return False
        
        # Verificar tamanho razo√°vel
        if len(code.split('\n')) > 200:
            return False
        
        return True

    def _safe_execute_python(self, code: str) -> CodeExecution:
        """Execu√ß√£o segura de c√≥digo Python"""
        execution = CodeExecution(language='python', code=code)
        start_time = time.time()
        temp_file = ""
        
        try:
            # Criar arquivo tempor√°rio
            with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:
                temp_file = f.name
                f.write(code)
            
            # Executar com timeout e limites
            result = subprocess.run(
                ['python', temp_file],
                capture_output=True,
                text=True,
                timeout=10,  # Timeout de 10 segundos
                cwd=tempfile.gettempdir()  # Executar em diret√≥rio tempor√°rio
            )
            
            execution.output = result.stdout
            execution.error = result.stderr
            execution.success = result.returncode == 0
            execution.return_code = result.returncode
            
        except subprocess.TimeoutExpired:
            execution.error = "Timeout: C√≥digo demorou mais de 10 segundos para executar"
            execution.success = False
            execution.return_code = -1
            
        except Exception as e:
            execution.error = f"Erro na execu√ß√£o: {e}"
            execution.success = False
            execution.return_code = -1
            
        finally:
            # Limpar arquivo tempor√°rio
            if temp_file and os.path.exists(temp_file):
                try:
                    os.unlink(temp_file)
                except:
                    pass
        
        execution.execution_time = time.time() - start_time
        return execution

    def _robust_optimization(self, state: CognitiveState):
        """Otimiza√ß√£o robusta do c√≥digo gerado"""
        state.reasoning_trace.append("‚ö° DREAM: Iniciando otimiza√ß√£o do c√≥digo")
        
        if not state.generated_code:
            return
        
        code_result = state.generated_code[-1]
        
        # Otimiza√ß√µes baseadas no tipo de c√≥digo
        optimizations = []
        
        # Otimiza√ß√£o de performance
        if 'animation' in state.pragmatic_context.get('features_detected', []):
            optimizations.append("Usar requestAnimationFrame para anima√ß√µes suaves")
            optimizations.append("Implementar throttling para eventos de alta frequ√™ncia")
        
        if 'physics' in state.pragmatic_context.get('features_detected', []):
            optimizations.append("Otimizar c√°lculos de f√≠sica com cache de resultados")
            optimizations.append("Usar interpola√ß√£o para movimentos suaves")
        
        # Otimiza√ß√£o de mem√≥ria
        if code_result.get('language') == 'javascript':
            optimizations.append("Implementar garbage collection manual para objetos grandes")
            optimizations.append("Usar object pooling para objetos frequentemente criados")
        
        if code_result.get('language') == 'python':
            optimizations.append("Usar generators para economizar mem√≥ria")
            optimizations.append("Implementar lazy loading quando apropriado")
        
        # Otimiza√ß√£o de UX
        optimizations.extend([
            "Adicionar feedback visual para a√ß√µes do usu√°rio",
            "Implementar loading states para opera√ß√µes demoradas",
            "Adicionar valida√ß√£o em tempo real",
            "Melhorar acessibilidade com ARIA labels"
        ])
        
        # Adicionar otimiza√ß√µes aos insights
        code_result['optimization_suggestions'] = optimizations
        state.meta_insights.append(f"Otimiza√ß√µes sugeridas: {len(optimizations)}")

    def _build_robust_response(self, state: CognitiveState):
        """Constr√≥i resposta robusta e abrangente"""
        if not state.generated_code:
            raise ValueError("Nenhum c√≥digo dispon√≠vel para construir resposta")
        
        code_result = state.generated_code[-1]
        
        # Cabe√ßalho principal
        parts = [
            f"**üß† DREAM CODE GENERATION SYSTEM V13.2**",
            f"**üéØ PROBLEMA ANALISADO:** {state.problem}",
            f"**üîç MODELO USADO:** {code_result.get('model_used', 'Template')}",
            f"**‚ö° COMPLEXIDADE:** {state.pragmatic_context.get('complexity', 'N/A').title()}",
            ""
        ]
        
        # C√≥digo principal
        language = code_result.get('language', 'txt')
        parts.extend([
            f"**üíª C√ìDIGO GERADO ({language.upper()})**",
            f"```{language}",
            code_result.get('code', '# C√≥digo n√£o dispon√≠vel'),
            "```",
            ""
        ])
        
        # Explica√ß√£o t√©cnica
        if code_result.get('explanation'):
            parts.extend([
                "**üìñ EXPLICA√á√ÉO T√âCNICA:**",
                code_result['explanation'],
                ""
            ])
        
        # Funcionalidades implementadas
        if code_result.get('features'):
            parts.extend([
                "**‚ö° FUNCIONALIDADES IMPLEMENTADAS:**",
                *[f"‚Ä¢ {feature}" for feature in code_result['features']],
                ""
            ])
        
        # Depend√™ncias
        if code_result.get('dependencies'):
            parts.extend([
                "**üì¶ DEPEND√äNCIAS:**",
                f"```bash",
                f"pip install {' '.join(code_result['dependencies'])}",
                "```",
                ""
            ])
        
        # Resultado da execu√ß√£o
        if state.code_execution:
            exec_result = state.code_execution
            status_icon = "‚úÖ" if exec_result.success else "‚ùå"
            parts.extend([
                f"**üöÄ EXECU√á√ÉO ROBUSTA:**",
                f"**Status:** {status_icon} {'Sucesso' if exec_result.success else 'Falha'} | **Tempo:** {exec_result.execution_time:.3f}s"
            ])
            
            if exec_result.output:
                parts.extend([
                    "",
                    "**üì§ SA√çDA DO PROGRAMA:**",
                    "```",
                    exec_result.output.strip(),
                    "```"
                ])
            
            if exec_result.error and not exec_result.success:
                parts.extend([
                    "",
                    "**‚ö†Ô∏è ERROS/AVISOS:**",
                    "```",
                    exec_result.error.strip(),
                    "```"
                ])
        
        # Insights t√©cnicos
        if code_result.get('dream_insights'):
            parts.extend([
                "",
                "**üîÆ INSIGHTS T√âCNICOS:**",
                *[f"‚Ä¢ {insight}" for insight in code_result['dream_insights']],
                ""
            ])
        
        # An√°lise de qualidade
        if state.meta_insights:
            parts.extend([
                "**üìä AN√ÅLISE DE QUALIDADE:**",
                *[f"‚Ä¢ {insight}" for insight in state.meta_insights[:8]],
                ""
            ])
        
        # Melhorias sugeridas
        if code_result.get('improvements'):
            parts.extend([
                "**üöÄ MELHORIAS SUGERIDAS:**",
                *[f"‚Ä¢ {improvement}" for improvement in code_result['improvements'][:5]],
                ""
            ])
        
        # Otimiza√ß√µes
        if code_result.get('optimization_suggestions'):
            parts.extend([
                "**‚ö° OTIMIZA√á√ïES RECOMENDADAS:**",
                *[f"‚Ä¢ {opt}" for opt in code_result['optimization_suggestions'][:5]],
                ""
            ])
        
        # Informa√ß√µes do template (se aplic√°vel)
        if code_result.get('template_fallback'):
            parts.extend([
                "**üîÑ INFORMA√á√ïES DO TEMPLATE:**",
                f"‚Ä¢ **Template usado:** {code_result.get('template_used', 'N/A')}",
                f"‚Ä¢ **Raz√£o da sele√ß√£o:** {code_result.get('selection_reason', 'N/A')}",
                f"‚Ä¢ **Adapta√ß√£o:** {code_result.get('adaptation_notes', 'Template padr√£o')}",
                ""
            ])
        
        # Informa√ß√µes t√©cnicas adicionais
        if state.pragmatic_context:
            ctx = state.pragmatic_context
            parts.extend([
                "**üîß DETALHES T√âCNICOS:**",
                f"‚Ä¢ **Linguagem:** {ctx.get('language', 'N/A')} | **Framework:** {ctx.get('framework', 'N/A')}",
                f"‚Ä¢ **Projeto:** {ctx.get('project_type', 'N/A')} | **Features:** {len(ctx.get('features_detected', []))}",
                f"‚Ä¢ **Estimativa:** ~{ctx.get('estimated_lines', 'N/A')} linhas | {ctx.get('estimated_time', 'N/A')}",
                ""
            ])
        
        # Problemas de valida√ß√£o (se houver)
        if state.validation_errors:
            parts.extend([
                "**‚ö†Ô∏è AVISOS DE VALIDA√á√ÉO:**",
                *[f"‚Ä¢ {error}" for error in state.validation_errors[:5]],
                ""
            ])
        
        # Rodap√©
        parts.extend([
            "**‚ú® DREAM V13.2 - Sistema AGI Multi-LLM**",
            "*C√≥digo gerado com an√°lise inteligente e valida√ß√£o robusta*"
        ])
        
        state.solution = "\n".join(parts)
        state.success = True
        state.confidence = 0.95 if not code_result.get('template_fallback') else 0.85
        state.reasoning_trace.append("üéâ DREAM: Resposta robusta constru√≠da com sucesso")

    def _create_fallback_code_response(self, state: CognitiveState, error_msg: str):
        """Cria resposta de fallback quando tudo mais falha"""
        state.reasoning_trace.append("üîÑ DREAM: Criando resposta de emerg√™ncia")
        
        state.solution = f"""**üîÑ DREAM SYSTEM V13.2 - MODO DE EMERG√äNCIA**

**‚ö†Ô∏è SITUA√á√ÉO:** Falha cr√≠tica na gera√ß√£o de c√≥digo
**üéØ PROBLEMA:** {state.problem}
**üîß ERRO:** {error_msg}

**üíª C√ìDIGO DE EMERG√äNCIA (Python):**
```python
# Sistema DREAM V13.2 - C√≥digo de Emerg√™ncia
# Problema: {state.problem}

def emergency_solution():
    \"\"\"
    Solu√ß√£o de emerg√™ncia gerada pelo sistema DREAM
    Este c√≥digo fornece uma base para implementa√ß√£o manual
    \"\"\"
    print("üß† Sistema DREAM V13.2 - Modo de Emerg√™ncia")
    print(f"Problema: {state.problem}")
    print()
    print("üìù Implementa√ß√£o necess√°ria:")
    print("1. Analisar os requisitos espec√≠ficos")
    print("2. Escolher a tecnologia apropriada")
    print("3. Implementar a l√≥gica principal")
    print("4. Adicionar tratamento de erros")
    print("5. Testar e validar")
    
    # TODO: Implementar solu√ß√£o espec√≠fica aqui
    pass

if __name__ == "__main__":
    emergency_solution()
```

**üìã INSTRU√á√ïES DE RECUPERA√á√ÉO:**
1. **Analise o problema:** Identifique os requisitos espec√≠ficos
2. **Escolha a tecnologia:** Determine a melhor linguagem/framework
3. **Implemente gradualmente:** Comece com funcionalidades b√°sicas
4. **Teste frequentemente:** Valide cada componente
5. **Documente o c√≥digo:** Adicione coment√°rios explicativos

**üîß POSS√çVEIS CAUSAS DO ERRO:**
‚Ä¢ Problema de conectividade com os modelos LLM
‚Ä¢ Complexidade muito alta para processamento autom√°tico
‚Ä¢ Requisitos amb√≠guos ou contradit√≥rios
‚Ä¢ Limita√ß√µes t√©cnicas tempor√°rias

**üí° PR√ìXIMOS PASSOS:**
‚Ä¢ Tente reformular o problema de forma mais espec√≠fica
‚Ä¢ Divida problemas complexos em partes menores
‚Ä¢ Verifique a conectividade com Ollama/OpenAI
‚Ä¢ Use os templates dispon√≠veis como ponto de partida

**üìû SUPORTE:**
Sistema DREAM V13.2 com fallbacks robustos e recupera√ß√£o autom√°tica."""
        
        state.success = True
        state.confidence = 0.4
        state.fallback_mode = True

# --- SISTEMA PRINCIPAL DREAM V13.2 ---
class DreamSystemV13_2:
    """Sistema AGI Multi-LLM robusto e unificado"""
    
    def __init__(self, enable_cache_persistence: bool = True):
        # Inicializar clientes LLM
        self.clients: Dict[str, LLMClient] = {}
        self.challenger_preference = ['gpt-4o', 'gpt-4o-mini', 'gemma3']
        
        # Tentar inicializar modelos
        models_to_try = {
            'gemma3': RobustOllamaClient,
            'gpt-4o-mini': OpenAIClient,
            'gpt-4o': OpenAIClient
        }
        
        for model_name, client_class in models_to_try.items():
            try:
                client = client_class(model=model_name)
                if client.available:
                    self.clients[model_name] = client
                    logging.info(f"‚úÖ Modelo {model_name} dispon√≠vel")
                else:
                    logging.warning(f"‚ùå Modelo {model_name} n√£o dispon√≠vel")
            except Exception as e:
                logging.error(f"Erro ao inicializar {model_name}: {e}")
        
        # Definir cliente padr√£o
        self.default_client_name = next(
            (m for m in self.challenger_preference if m in self.clients), 
            None
        )
        
        if not self.default_client_name:
            logging.error("‚ùå Nenhum cliente LLM dispon√≠vel!")
            raise RuntimeError("Sistema n√£o pode operar sem LLMs dispon√≠veis")
        
        logging.info(f"üéØ Modelo padr√£o: {self.default_client_name}")
        logging.info(f"üìä Modelos dispon√≠veis: {list(self.clients.keys())}")
        
        # Inicializar componentes
        default_client = self.clients[self.default_client_name]
        self.intent_classifier = RobustIntentClassifier(default_client)
        self.code_handler = RobustCodeGenerationHandler()
        self.sentiment_analyzer = SentimentAnalyzer()
        self.cache = IntelligentCache(max_size=200, enable_persistence=enable_cache_persistence)
        
        # Configura√ß√µes do sistema
        self.confidence_threshold = 0.7
        self.max_reasoning_depth = 5
        self.enable_debug_mode = False
        
        # M√©tricas e hist√≥rico
        self.problem_history = []
        self.performance_metrics = {
            'total_problems': 0,
            'successful_solutions': 0,
            'code_generations': 0,
            'cache_hits': 0,
            'fallback_uses': 0,
            'model_usage': defaultdict(int),
            'average_response_time': 0.0,
            'error_count': 0
        }
        
        # Sistema de sa√∫de
        self.system_health = 'EXCELLENT'
        self.failure_count = 0
        self.max_failures = 10
        
        logging.info("üß† DREAM V13.2 inicializado com sucesso!")

    def solve_problem(self, problem: str, model_name: Optional[str] = None, **kwargs) -> CognitiveState:
        """M√©todo principal para resolu√ß√£o de problemas"""
        state = CognitiveState(problem=problem)
        start_time = time.time()
        
        try:
            self.performance_metrics['total_problems'] += 1
            
            # Valida√ß√£o b√°sica
            if not problem or not problem.strip():
                raise ValueError("Problema vazio ou inv√°lido fornecido")
            
            # Selecionar cliente
            active_client = self._select_client(model_name)
            if not active_client:
                raise RuntimeError("Nenhum modelo LLM dispon√≠vel")
            
            state.model_used = active_client.model
            state.reasoning_trace.append(f"üß† DREAM V13.2: Usando modelo {active_client.model}")
            
            # An√°lise de sentimento
            state.sentiment_analysis = self.sentiment_analyzer.analyze(problem)
            state.reasoning_trace.append(f"üé≠ An√°lise de sentimento: {state.sentiment_analysis.get('tone', 'neutro')}")
            
            # Classifica√ß√£o de inten√ß√£o
            intent, confidence = self.intent_classifier.classify(problem)
            state.intent = intent
            state.reasoning_trace.append(f"üéØ Inten√ß√£o: {intent.value} (confian√ßa: {confidence:.2f})")
            
            # Verificar cache
            cached_response = self.cache.get(problem, state.intent)
            if cached_response and not kwargs.get('force_regenerate', False):
                self._apply_cached_response(state, cached_response)
                self.performance_metrics['cache_hits'] += 1
                state.decision_time = time.time() - start_time
                return state
            
            # Roteamento inteligente de estrat√©gias
            self._route_to_strategy(state, active_client)
            
            # P√≥s-processamento
            self._post_process_solution(state)
            
            # Atualizar m√©tricas
            self._update_metrics(state, True)
            
            # Armazenar no cache se bem-sucedido
            if state.success and not state.cache_hit:
                self.cache.set(problem, state.intent, state.__dict__)
            
        except Exception as e:
            self._handle_system_error(state, e)
            self._update_metrics(state, False)
        
        state.decision_time = time.time() - start_time
        self._update_knowledge_base(state)
        
        return state

    def _select_client(self, model_name: Optional[str]) -> Optional[LLMClient]:
        """Seleciona cliente LLM apropriado"""
        if model_name and model_name in self.clients:
            client = self.clients[model_name]
            if client.is_healthy():
                return client
        
        # Tentar cliente padr√£o
        if self.default_client_name in self.clients:
            client = self.clients[self.default_client_name]
            if client.is_healthy():
                return client
        
        # Procurar qualquer cliente saud√°vel
        for client in self.clients.values():
            if client.is_healthy():
                return client
        
        return None

    def _apply_cached_response(self, state: CognitiveState, cached_data: Dict):
        """Aplica resposta do cache ao estado"""
        cached_response = cached_data['response']
        
        # Aplicar campos importantes
        state.solution = cached_response.get('solution', 'Solu√ß√£o em cache')
        state.confidence = cached_response.get('confidence', 0.8)
        state.success = cached_response.get('success', True)
        state.strategy = cached_response.get('strategy')
        state.generated_code = cached_response.get('generated_code', [])
        state.meta_insights = cached_response.get('meta_insights', [])
        
        state.cache_hit = True
        state.reasoning_trace.append("üéØ DREAM: Resposta recuperada do cache inteligente")

    def _route_to_strategy(self, state: CognitiveState, client: LLMClient):
        """Roteamento inteligente para estrat√©gias espec√≠ficas"""
        try:
            if state.intent == IntentType.CODE_GENERATION:
                self.code_handler.handle(state, client)
                if state.success:
                    self.performance_metrics['code_generations'] += 1
                    
            elif state.intent == IntentType.ACADEMIC_TECHNICAL:
                self._handle_fact_checking_debate(state, client)
                
            elif state.intent == IntentType.PHILOSOPHICAL_INQUIRY:
                self._handle_deep_dive_query(state, client)
                
            elif state.intent == IntentType.BROAD_SYNTHESIS:
                self._handle_broad_synthesis_query(state, client)
                
            elif state.intent == IntentType.RIDDLE_LOGIC:
                self._handle_riddle_logic(state, client)
                
            elif state.intent == IntentType.TRIVIAL_QUERY:
                self._handle_trivial_query(state, client)
                
            elif state.intent == IntentType.PLANNING_TASK:
                self._handle_planning_task(state, client)
                
            else:
                self._handle_general_query(state, client)
            
            # Incrementar uso do modelo
            self.performance_metrics['model_usage'][client.model] += 1
            
        except Exception as e:
            logging.error(f"Erro no roteamento de estrat√©gia: {e}")
            state.error = f"Erro na estrat√©gia {state.intent.value}: {e}"
            self._handle_fallback(state)

    def _select_challenger(self, proponent_client: LLMClient) -> LLMClient:
        """Seleciona modelo desafiador para debate"""
        for model_name in self.challenger_preference:
            if (model_name != proponent_client.model and 
                model_name in self.clients and 
                self.clients[model_name].is_healthy()):
                return self.clients[model_name]
        
        # Se n√£o encontrar, usar o mesmo modelo
        return proponent_client

    def _handle_fact_checking_debate(self, state: CognitiveState, client: LLMClient):
        """Debate adversarial para verifica√ß√£o de fatos"""
        state.strategy = ReasoningStrategy.FACT_CHECKING_DEBATE
        state.reasoning_trace.append("‚öîÔ∏è DREAM: Iniciando debate adversarial para verifica√ß√£o")
        
        try:
            # Etapa 1: Resposta inicial (Proponente)
            state.reasoning_trace.append("1Ô∏è‚É£ Gerando resposta inicial...")
            proponent_response = client.chat(
                messages=[{'role': 'user', 'content': f"Responda de forma detalhada: '{state.problem}'"}],
                temperature=0.3
            )['message']['content']
            
            # Etapa 2: Extrair premissa central
            state.reasoning_trace.append("2Ô∏è‚É£ Extraindo premissa central...")
            premise_prompt = f"""Da seguinte resposta, extraia a afirma√ß√£o central mais importante em uma frase clara:
            
"{proponent_response}"

Responda apenas com a afirma√ß√£o central, sem explica√ß√µes."""
            
            central_premise = client.chat(
                messages=[{'role': 'user', 'content': premise_prompt}],
                temperature=0.0
            )['message']['content']
            
            # Etapa 3: Verifica√ß√£o por modelo desafiador
            challenger_client = self._select_challenger(client)
            state.reasoning_trace.append(f"3Ô∏è‚É£ Verifica√ß√£o com modelo desafiador: {challenger_client.model}")
            
            challenge_prompt = f"""Voc√™ √© um verificador de fatos rigoroso. Analise esta afirma√ß√£o:

"{central_premise}"

Verifique:
1. A veracidade da informa√ß√£o
2. Se h√° nuances importantes omitidas
3. Se existe consenso cient√≠fico/acad√™mico
4. Limita√ß√µes ou controv√©rsias

Seja objetivo e cite preocupa√ß√µes espec√≠ficas se houver."""
            
            challenger_findings = challenger_client.chat(
                messages=[{'role': 'user', 'content': challenge_prompt}],
                temperature=0.1
            )['message']['content']
            
            # Etapa 4: S√≠ntese final
            state.reasoning_trace.append("4Ô∏è‚É£ Sintetizando resposta final...")
            synthesis_prompt = f"""Com base no debate entre duas perspectivas, forne√ßa a resposta final para: '{state.problem}'

PROPOSTA INICIAL:
{proponent_response}

VERIFICA√á√ÉO CR√çTICA:
{challenger_findings}

Forne√ßa uma resposta equilibrada que incorpore os pontos v√°lidos de ambas as perspectivas."""
            
            final_answer = client.chat(
                messages=[{'role': 'user', 'content': synthesis_prompt}],
                temperature=0.2
            )['message']['content']
            
            # Construir resposta estruturada
            state.solution = f"""**üí° RESPOSTA VERIFICADA (Debate Adversarial)**

{final_answer}

---

<details>
<summary>üî¨ **Processo de Verifica√ß√£o**</summary>

**üìù Proposta Inicial:**
{proponent_response[:500]}{'...' if len(proponent_response) > 500 else ''}

**üîç Premissa Central Identificada:**
> {central_premise}

**‚öñÔ∏è Verifica√ß√£o Cr√≠tica ({challenger_client.model}):**
{challenger_findings[:500]}{'...' if len(challenger_findings) > 500 else ''}

**üéØ Modelos Utilizados:** {client.model} (proponente) + {challenger_client.model} (verificador)

</details>"""
            
            state.success = True
            state.confidence = 0.95
            state.reasoning_trace.append("‚úÖ Debate adversarial conclu√≠do com sucesso")
            
        except Exception as e:
            logging.error(f"Erro no debate adversarial: {e}")
            state.error = f"Falha no debate: {e}"
            self._handle_fallback(state)

    def _handle_deep_dive_query(self, state: CognitiveState, client: LLMClient):
        """Investiga√ß√£o profunda com autocr√≠tica"""
        state.strategy = ReasoningStrategy.SELF_CRITIQUE_REFINEMENT
        state.reasoning_trace.append("ü§î DREAM: Iniciando investiga√ß√£o profunda com autocr√≠tica")
        
        try:
            # Etapa 1: Rascunho inicial
            state.reasoning_trace.append("1Ô∏è‚É£ Criando rascunho inicial...")
            draft_prompt = f"""Forne√ßa uma resposta abrangente para: '{state.problem}'
            
Seja detalhado e explore m√∫ltiplas dimens√µes do problema."""
            
            draft_answer = client.chat(
                messages=[{'role': 'user', 'content': draft_prompt}],
                temperature=0.4
            )['message']['content']
            
            # Etapa 2: Autocr√≠tica rigorosa
            state.reasoning_trace.append("2Ô∏è‚É£ Aplicando autocr√≠tica rigorosa...")
            critique_prompt = f"""Analise criticamente esta resposta para '{state.problem}':

"{draft_answer}"

Identifique:
1. A suposi√ß√£o mais fr√°gil ou question√°vel
2. Pontos onde falta evid√™ncia
3. Perspectivas importantes n√£o consideradas
4. Poss√≠veis vieses ou limita√ß√µes

Seja rigoroso na cr√≠tica."""
            
            critique = client.chat(
                messages=[{'role': 'user', 'content': critique_prompt}],
                temperature=0.3
            )['message']['content']
            
            # Etapa 3: Vers√£o refinada
            state.reasoning_trace.append("3Ô∏è‚É£ Refinando resposta baseada na cr√≠tica...")
            refinement_prompt = f"""Reescreva uma resposta melhorada para '{state.problem}', incorporando esta cr√≠tica:

RASCUNHO ORIGINAL:
{draft_answer}

CR√çTICA IDENTIFICADA:
{critique}

Forne√ßa uma resposta mais nuan√ßada, equilibrada e robusta."""
            
            final_answer = client.chat(
                messages=[{'role': 'user', 'content': refinement_prompt}],
                temperature=0.3
            )['message']['content']
            
            # Construir resposta estruturada
            state.solution = f"""**üí° RESPOSTA REFINADA (Autocr√≠tica)**

{final_answer}

---

<details>
<summary>üî¨ **Processo de Refinamento**</summary>

**üéØ Cr√≠tica Aplicada:**
{critique[:400]}{'...' if len(critique) > 400 else ''}

**üìà Melhorias Incorporadas:**
‚Ä¢ An√°lise mais nuan√ßada dos pontos fracos identificados
‚Ä¢ Incorpora√ß√£o de perspectivas alternativas
‚Ä¢ Reconhecimento de limita√ß√µes e incertezas
‚Ä¢ Abordagem mais equilibrada do problema

**üß† Modelo:** {client.model} (processo de autocr√≠tica)

</details>"""
            
            state.success = True
            state.confidence = 0.90
            state.reasoning_trace.append("‚úÖ Autocr√≠tica e refinamento conclu√≠dos")
            
        except Exception as e:
            logging.error(f"Erro na autocr√≠tica: {e}")
            state.error = f"Falha na autocr√≠tica: {e}"
            self._handle_fallback(state)

    def _handle_broad_synthesis_query(self, state: CognitiveState, client: LLMClient):
        """S√≠ntese ampla com decomposi√ß√£o hier√°rquica"""
        state.strategy = ReasoningStrategy.HIERARCHICAL_DECOMPOSITION
        state.reasoning_trace.append("üß± DREAM: Iniciando s√≠ntese com decomposi√ß√£o hier√°rquica")
        
        try:
            # Etapa 1: Decomposi√ß√£o em sub-quest√µes
            state.reasoning_trace.append("1Ô∏è‚É£ Decompondo em sub-quest√µes...")
            decomposition_prompt = f"""Para responder adequadamente: '{state.problem}'

Decomponha em 4 sub-quest√µes fundamentais que, quando respondidas, fornecem uma vis√£o completa.

Responda em JSON:
{{"sub_questions": ["pergunta1", "pergunta2", "pergunta3", "pergunta4"]}}"""
            
            decomp_response = client.chat(
                messages=[{'role': 'user', 'content': decomposition_prompt}],
                format='json',
                temperature=0.2
            )
            
            sub_questions_data = ResponseValidator.validate_json_response(
                decomp_response['message']['content'],
                required_fields=['sub_questions']
            )
            
            sub_questions = sub_questions_data['sub_questions']
            if not sub_questions or len(sub_questions) < 3:
                raise ValueError("Decomposi√ß√£o inadequada")
            
            state.reasoning_trace.append(f"üìã {len(sub_questions)} sub-quest√µes identificadas")
            
            # Etapa 2: Responder cada sub-quest√£o
            state.reasoning_trace.append("2Ô∏è‚É£ Respondendo sub-quest√µes...")
            sub_answers = []
            
            for i, sub_q in enumerate(sub_questions[:4], 1):  # M√°ximo 4 quest√µes
                state.reasoning_trace.append(f"   2.{i} Processando: {sub_q[:50]}...")
                
                sub_answer = client.chat(
                    messages=[{'role': 'user', 'content': f"Responda de forma concisa mas completa: {sub_q}"}],
                    temperature=0.3
                )['message']['content']
                
                sub_answers.append({
                    'question': sub_q,
                    'answer': sub_answer
                })
            
            # Etapa 3: S√≠ntese final
            state.reasoning_trace.append("3Ô∏è‚É£ Sintetizando resposta abrangente...")
            
            context_for_synthesis = "\n\n".join([
                f"**Q{i+1}:** {qa['question']}\n**A{i+1}:** {qa['answer']}"
                for i, qa in enumerate(sub_answers)
            ])
            
            synthesis_prompt = f"""Com base nas an√°lises das sub-quest√µes, forne√ßa uma resposta abrangente e bem estruturada para: '{state.problem}'

AN√ÅLISES REALIZADAS:
{context_for_synthesis}

Crie uma s√≠ntese coesa que integre todos os aspectos analisados."""
            
            final_synthesis = client.chat(
                messages=[{'role': 'user', 'content': synthesis_prompt}],
                temperature=0.3
            )['message']['content']
            
            # Construir resposta estruturada
            state.solution = f"""**üí° S√çNTESE ABRANGENTE (Decomposi√ß√£o Hier√°rquica)**

{final_synthesis}

---

<details>
<summary>üß± **Processo de Decomposi√ß√£o**</summary>

**üìä Sub-quest√µes Analisadas:**

{chr(10).join([f'**{i+1}.** {qa["question"][:100]}{"..." if len(qa["question"]) > 100 else ""}' for i, qa in enumerate(sub_answers)])}

**üîó Metodologia:**
‚Ä¢ Decomposi√ß√£o hier√°rquica do problema complexo
‚Ä¢ An√°lise individual de cada componente
‚Ä¢ S√≠ntese integradora dos resultados
‚Ä¢ Valida√ß√£o da coer√™ncia global

**üß† Modelo:** {client.model}

</details>"""
            
            state.success = True
            state.confidence = 0.92
            state.reasoning_trace.append("‚úÖ S√≠ntese hier√°rquica conclu√≠da")
            
        except Exception as e:
            logging.error(f"Erro na s√≠ntese hier√°rquica: {e}")
            state.error = f"Falha na s√≠ntese: {e}"
            self._handle_fallback(state)

    def _handle_riddle_logic(self, state: CognitiveState, client: LLMClient):
        """Handler robusto para charadas e l√≥gica lateral"""
        state.strategy = ReasoningStrategy.RIDDLE_ANALYSIS
        state.reasoning_trace.append("üß© DREAM: Analisando charada/l√≥gica lateral")
        
        try:
            # Verificar padr√µes conhecidos primeiro
            obvious_solution = self._check_obvious_riddle_solutions(state.problem)
            
            if obvious_solution:
                state.solution = obvious_solution
                state.success = True
                state.confidence = 1.0
                state.reasoning_trace.append("‚ö° Solu√ß√£o √≥bvia identificada")
                return
            
            # An√°lise via LLM
            riddle_prompt = f"""Analise esta charada/problema de l√≥gica lateral com muito cuidado:
            
"{state.problem}"

IMPORTANTE: Primeiro verifique se existe uma solu√ß√£o √≥bvia antes de procurar pegadinhas.

Responda em JSON:
{{
    "has_obvious_solution": true/false,
    "obvious_solution": "se houver, qual √©",
    "trap_analysis": "an√°lise da pegadinha se n√£o houver solu√ß√£o √≥bvia",
    "logical_answer": "a resposta correta",
    "reasoning": "racioc√≠nio passo a passo",
    "confidence_level": 0.9
}}"""
            
            response = client.chat(
                messages=[{'role': 'user', 'content': riddle_prompt}],
                format='json',
                temperature=0.1
            )
            
            data = ResponseValidator.validate_json_response(
                response['message']['content'],
                required_fields=['logical_answer', 'reasoning']
            )
            
            # Construir resposta
            if data.get('has_obvious_solution', False):
                state.solution = f"""**üß© CHARADA RESOLVIDA - SOLU√á√ÉO √ìBVIA**

**‚ùì Pergunta:** {state.problem}

**üí° Solu√ß√£o √ìbvia:**
**{data.get('obvious_solution', 'N/A')}**

**üìù Racioc√≠nio:**
{data.get('reasoning', 'N/A')}

**üéØ Li√ß√£o:** Nem todo problema precisa de solu√ß√£o complexa!"""
            else:
                state.solution = f"""**üß© CHARADA ANALISADA - L√ìGICA LATERAL**

**‚ùì Pergunta:** {state.problem}

**üé≠ Pegadinha Identificada:**
{data.get('trap_analysis', 'N/A')}

**üí° Resposta L√≥gica:**
**{data.get('logical_answer', 'N/A')}**

**üß† Racioc√≠nio:**
{data.get('reasoning', 'N/A')}

**üîç Processo:** An√°lise de l√≥gica lateral aplicada"""
            
            state.success = True
            state.confidence = data.get('confidence_level', 0.9)
            state.reasoning_trace.append("‚úÖ Charada analisada com sucesso")
            
        except Exception as e:
            logging.error(f"Erro na an√°lise de charada: {e}")
            state.error = f"Falha na an√°lise: {e}"
            self._handle_fallback(state)

    def _check_obvious_riddle_solutions(self, problem: str) -> Optional[str]:
        """Verifica solu√ß√µes √≥bvias para charadas conhecidas"""
        problem_lower = problem.lower()
        
        # Problema dos jarros de √°gua
        if "gallon" in problem_lower and "jug" in problem_lower:
            numbers = re.findall(r'(\d+)-gallon', problem_lower)
            target_match = re.search(r'measure.*?(\d+)\s+gallon', problem_lower)
            
            if numbers and target_match:
                available_jugs = [int(n) for n in numbers]
                target_amount = int(target_match.group(1))
                
                if target_amount in available_jugs:
                    return f"""**üß© CHARADA RESOLVIDA - SOLU√á√ÉO √ìBVIA**

**‚ùì Pergunta:** {problem}

**üí° Resposta Simples:**
**Use o jarro de {target_amount} gal√µes diretamente!**

**üé≠ An√°lise da Pegadinha:**
Esta charada tenta nos fazer pensar em m√©todos complexos de transfer√™ncia de √°gua, quando a solu√ß√£o √© √≥bvia: voc√™ j√° tem um jarro do tamanho exato que precisa.

**üìñ Explica√ß√£o:**
1. Voc√™ tem jarros de {', '.join(map(str, available_jugs))} gal√µes
2. Precisa medir {target_amount} gal√µes
3. Simplesmente pegue o jarro de {target_amount} gal√µes e encha-o

**üéØ Li√ß√£o:** Sempre verifique se a solu√ß√£o √≥bvia n√£o √© a correta antes de complicar!"""
        
        return None

    def _handle_trivial_query(self, state: CognitiveState, client: LLMClient):
        """Handler para consultas triviais (principalmente contagem)"""
        state.strategy = ReasoningStrategy.CODE_BASED_SOLVER
        state.reasoning_trace.append("üî¢ DREAM: Processando consulta trivial")
        
        try:
            # Padr√µes de contagem expandidos
            count_patterns = [
                r"count\s+(?:the\s+)?(?:number\s+of\s+)?(?:occurrences\s+of\s+)?(?:the\s+)?(?:letter\s+)?['\"]*([a-zA-Z]+)['\"]*\s+in\s+(?:the\s+)?(?:word\s+)?['\"]*([a-zA-Z]+)['\"]*",
                r"how\s+many\s+(?:times\s+)?(?:does\s+)?(?:the\s+)?(?:letter\s+)?['\"]*([a-zA-Z]+)['\"]*\s+(?:appear\s+)?(?:occur\s+)?in\s+(?:the\s+)?(?:word\s+)?['\"]*([a-zA-Z]+)['\"]*",
                r"how\s+many\s+['\"]*([a-zA-Z]+)['\"]*\s+(?:are\s+)?(?:in\s+)?(?:the\s+)?(?:word\s+)?['\"]*([a-zA-Z]+)['\"]*",
                r"quantos?\s+([a-zA-Z√Ä-√ø]+)\s+.*?\s+([a-zA-Z√Ä-√ø]+)"
            ]
            
            target, text = None, None
            
            # Tentar cada padr√£o
            for pattern in count_patterns:
                match = re.search(pattern, state.problem.lower())
                if match and len(match.groups()) >= 2:
                    groups = match.groups()
                    target = groups[0].strip().strip('\'"')
                    text = groups[1].strip().strip('\'"')
                    if target and text:
                        break
            
            if target and text:
                # Realizar contagem
                if len(target) == 1:
                    # Contagem de letra
                    count = text.upper().count(target.upper())
                    positions = [i+1 for i, char in enumerate(text.upper()) if char == target.upper()]
                    
                    state.solution = f"""**üî¢ CONSULTA TRIVIAL RESOLVIDA**

**üìä An√°lise de Contagem:**
‚Ä¢ **Procurando:** Letra '{target.upper()}'
‚Ä¢ **Na palavra:** '{text.upper()}'
‚Ä¢ **M√©todo:** Contagem case-insensitive

**üéØ Resultado:**
A letra **'{target.upper()}'** aparece **{count}** vez(es) na palavra **'{text.upper()}'**

**üìç Posi√ß√µes encontradas:** {', '.join(map(str, positions)) if positions else 'Nenhuma'}

**‚úÖ Verifica√ß√£o:**
‚Ä¢ Palavra: {text.upper()} ({len(text)} caracteres)
‚Ä¢ Busca: case-insensitive
‚Ä¢ Precis√£o: 100%"""
                
                else:
                    # Contagem de substring
                    count = text.lower().count(target.lower())
                    state.solution = f"""**üî¢ CONSULTA TRIVIAL RESOLVIDA**

**üìä An√°lise de Substring:**
‚Ä¢ **Procurando:** '{target}'
‚Ä¢ **No texto:** '{text}'
‚Ä¢ **M√©todo:** Contagem case-insensitive

**üéØ Resultado:**
A sequ√™ncia **'{target}'** aparece **{count}** vez(es) em **'{text}'**

**‚úÖ Verifica√ß√£o:** Busca precisa realizada"""
                
                state.confidence = 1.0
                state.success = True
                state.reasoning_trace.append(f"‚úÖ Contagem: '{target}' em '{text}' = {count}")
                
            else:
                # Tentar via LLM se padr√£o n√£o funcionar
                state.reasoning_trace.append("üîÑ Tentando an√°lise via LLM...")
                self._handle_trivial_with_llm(state, client)
                
        except Exception as e:
            logging.error(f"Erro na consulta trivial: {e}")
            state.error = f"Erro na contagem: {e}"
            self._handle_fallback(state)

    def _handle_trivial_with_llm(self, state: CognitiveState, client: LLMClient):
        """Fallback para consultas triviais via LLM"""
        prompt = f"""Analise se esta √© uma pergunta de contagem simples:
        
"{state.problem}"

Se for contagem (letras, palavras, etc.), responda em JSON:
{{
    "is_counting": true,
    "target": "o que est√° sendo contado",
    "source": "onde est√° sendo contado",
    "count": n√∫mero_exato,
    "explanation": "explica√ß√£o do processo"
}}

Se N√ÉO for contagem, responda:
{{
    "is_counting": false,
    "reason": "por que n√£o √© contagem"
}}"""
        
        try:
            response = client.chat(
                messages=[{'role': 'user', 'content': prompt}],
                format='json',
                temperature=0.0
            )
            
            data = ResponseValidator.validate_json_response(
                response['message']['content'],
                required_fields=['is_counting']
            )
            
            if data.get('is_counting', False):
                state.solution = f"""**üî¢ CONSULTA TRIVIAL RESOLVIDA (VIA LLM)**

**üìä An√°lise:** {data.get('target', 'N/A')} em {data.get('source', 'N/A')}

**üéØ Resultado:** **{data.get('count', 0)}** ocorr√™ncia(s)

**üìù Explica√ß√£o:** {data.get('explanation', 'N/A')}

**üîß M√©todo:** An√°lise via {client.model}"""
                
                state.success = True
                state.confidence = 0.95
            else:
                reason = data.get('reason', 'N√£o √© pergunta de contagem')
                state.reasoning_trace.append(f"‚ÑπÔ∏è LLM: {reason}")
                self._handle_general_query(state, client)
                
        except Exception as e:
            logging.error(f"Fallback LLM falhou: {e}")
            self._handle_fallback(state)

    def _handle_planning_task(self, state: CognitiveState, client: LLMClient):
        """Handler para tarefas de planejamento"""
        state.strategy = ReasoningStrategy.PLANNING_EXECUTION
        state.reasoning_trace.append("üìã DREAM: Processando tarefa de planejamento")
        
        try:
            planning_prompt = f"""Crie um plano detalhado e execut√°vel para: '{state.problem}'

Forne√ßa:
1. An√°lise do problema
2. Objetivos claros
3. Etapas espec√≠ficas
4. Recursos necess√°rios
5. Cronograma estimado
6. Poss√≠veis obst√°culos e solu√ß√µes

Seja pr√°tico e espec√≠fico."""
            
            response = client.chat(
                messages=[{'role': 'user', 'content': planning_prompt}],
                temperature=0.3
            )
            
            plan_content = response['message']['content']
            
            state.solution = f"""**üìã PLANO ESTRAT√âGICO**

**üéØ Problema:** {state.problem}

{plan_content}

**üîß Gerado por:** {client.model}
**üìä Tipo:** Planejamento estruturado"""
            
            state.success = True
            state.confidence = 0.85
            state.reasoning_trace.append("‚úÖ Plano estrat√©gico criado")
            
        except Exception as e:
            logging.error(f"Erro no planejamento: {e}")
            state.error = f"Falha no planejamento: {e}"
            self._handle_fallback(state)

    def _handle_general_query(self, state: CognitiveState, client: LLMClient):
        """Handler para consultas gerais"""
        state.strategy = ReasoningStrategy.NEURAL_INTUITIVE
        state.reasoning_trace.append("üß† DREAM: Processando consulta geral")
        
        try:
            # Ajustar temperatura baseada na inten√ß√£o
            temperature = 0.3
            if state.intent == IntentType.CREATIVE_SYNTHESIS:
                temperature = 0.7
            elif state.intent == IntentType.PHILOSOPHICAL_INQUIRY:
                temperature = 0.5
            
            response = client.chat(
                messages=[{'role': 'user', 'content': f"Responda de forma clara e informativa: {state.problem}"}],
                temperature=temperature
            )
            
            state.solution = f"""**üí° RESPOSTA**

{response['message']['content']}

**üîß Gerado por:** {client.model}
**üìä Categoria:** {state.intent.value}"""
            
            state.success = True
            state.confidence = 0.80
            state.reasoning_trace.append("‚úÖ Consulta geral processada")
            
        except Exception as e:
            logging.error(f"Erro na consulta geral: {e}")
            state.error = f"Falha na consulta: {e}"
            self._handle_fallback(state)

    def _handle_fallback(self, state: CognitiveState):
        """Handler de fallback universal"""
        state.strategy = ReasoningStrategy.FALLBACK_RECOVERY
        state.reasoning_trace.append("üîÑ DREAM: Executando fallback universal")
        
        # Informa√ß√µes do sistema
        available_models = list(self.clients.keys())
        
        state.solution = f"""**üîÑ SISTEMA DREAM V13.2 - MODO FALLBACK**

**‚ùì Pergunta:** {state.problem}
**üéØ Inten√ß√£o detectada:** {state.intent.value}
**‚ö†Ô∏è Situa√ß√£o:** {state.error or 'Processamento n√£o completado'}

**üè• Status do Sistema:**
‚Ä¢ **Sa√∫de:** {self.system_health}
‚Ä¢ **Modelos dispon√≠veis:** {', '.join(available_models)}
‚Ä¢ **Taxa de sucesso:** {self._calculate_success_rate():.1f}%

**üí° Sugest√µes:**
‚Ä¢ Reformule a pergunta de forma mais espec√≠fica
‚Ä¢ Tente uma das funcionalidades principais:
  - Gera√ß√£o de c√≥digo (ex: "crie um programa...")
  - Consultas factuais diretas
  - Problemas de l√≥gica/charadas
  - Planejamento passo a passo

**üîß Sistema operando em modo de resili√™ncia**"""
        
        state.success = True
        state.confidence = 0.4
        state.fallback_mode = True
        self.performance_metrics['fallback_uses'] += 1

    def _post_process_solution(self, state: CognitiveState):
        """P√≥s-processamento da solu√ß√£o"""
        if not state.success:
            return
        
        # Adicionar metadados √∫teis
        if state.solution and not state.cache_hit:
            footer = f"\n\n---\n*üß† DREAM V13.2 | Modelo: {state.model_used} | Tempo: {state.decision_time:.2f}s*"
            state.solution += footer
        
        # Validar qualidade da resposta
        if state.solution:
            quality_score = self._assess_solution_quality(state)
            state.meta_insights.append(f"Qualidade da resposta: {quality_score:.2f}/1.0")

    def _assess_solution_quality(self, state: CognitiveState) -> float:
        """Avalia qualidade da solu√ß√£o gerada"""
        if not state.solution:
            return 0.0
        
        score = 0.0
        solution_len = len(state.solution)
        
        # Comprimento apropriado
        if 100 <= solution_len <= 2000:
            score += 0.3
        elif solution_len >= 50:
            score += 0.2
        
        # Estrutura organizada
        if '**' in state.solution:  # Formata√ß√£o markdown
            score += 0.2
        
        if any(marker in state.solution for marker in ['‚Ä¢', '-', '1.', '2.']):  # Listas
            score += 0.2
        
        # Conte√∫do t√©cnico
        if state.intent == IntentType.CODE_GENERATION and '```' in state.solution:
            score += 0.3
        
        return min(score, 1.0)

    def _handle_system_error(self, state: CognitiveState, error: Exception):
        """Manipula erros do sistema de forma robusta"""
        self.failure_count += 1
        error_type = type(error).__name__
        
        logging.error(f"Erro do sistema #{self.failure_count}: {error}", exc_info=True)
        
        # Classificar erro
        error_categories = {
            'ConnectionError': 'Problema de conectividade com LLM',
            'ValidationError': 'Erro na valida√ß√£o de dados',
            'TimeoutError': 'Timeout na opera√ß√£o',
            'ValueError': 'Erro nos dados de entrada',
            'RuntimeError': 'Erro interno do sistema'
        }
        
        error_description = error_categories.get(error_type, 'Erro n√£o categorizado')
        
        state.error = f"{error_description}: {error}"
        state.success = False
        state.fallback_mode = True
        
        # Resposta de recupera√ß√£o
        state.solution = f"""**üö® SISTEMA DE RECUPERA√á√ÉO ATIVO**

**‚ùå Erro detectado:** {error_type}
**üîç Descri√ß√£o:** {error_description}
**üéØ Problema original:** {state.problem}

**üìä Status do Sistema:**
‚Ä¢ Falhas consecutivas: {self.failure_count}
‚Ä¢ Sa√∫de atual: {self.system_health}
‚Ä¢ Modelos dispon√≠veis: {len(self.clients)}

**üîß A√ß√µes de Recupera√ß√£o:**
‚Ä¢ Sistema continua operacional
‚Ä¢ Fallbacks autom√°ticos ativados
‚Ä¢ Monitoramento de estabilidade ativo

**üí° Recomenda√ß√µes:**
‚Ä¢ Tente novamente em alguns momentos
‚Ä¢ Reformule a pergunta se persistir
‚Ä¢ Verifique conectividade se usando modelos online"""
        
        # Atualizar sa√∫de do sistema
        self._update_system_health()

    def _update_metrics(self, state: CognitiveState, success: bool):
        """Atualiza m√©tricas de performance"""
        if success and state.success:
            self.performance_metrics['successful_solutions'] += 1
        elif not success:
            self.performance_metrics['error_count'] += 1
        
        # Atualizar tempo m√©dio de resposta
        current_avg = self.performance_metrics['average_response_time']
        total_problems = self.performance_metrics['total_problems']
        
        new_avg = ((current_avg * (total_problems - 1)) + state.decision_time) / total_problems
        self.performance_metrics['average_response_time'] = new_avg

    def _update_system_health(self):
        """Atualiza indicador de sa√∫de do sistema"""
        if self.failure_count == 0:
            self.system_health = 'EXCELLENT'
        elif self.failure_count <= 2:
            self.system_health = 'GOOD'
        elif self.failure_count <= 5:
            self.system_health = 'DEGRADED'
        else:
            self.system_health = 'CRITICAL'

    def _calculate_success_rate(self) -> float:
        """Calcula taxa de sucesso atual"""
        total = self.performance_metrics['total_problems']
        if total == 0:
            return 100.0
        
        successful = self.performance_metrics['successful_solutions']
        return (successful / total) * 100

    def _update_knowledge_base(self, state: CognitiveState):
        """Atualiza base de conhecimento do sistema"""
        try:
            # Criar registro resumido
            record = {
                'problem_hash': hashlib.md5(state.problem.encode()).hexdigest()[:8],
                'intent': state.intent.value,
                'strategy': state.strategy.value if state.strategy else None,
                'success': state.success,
                'confidence': state.confidence,
                'model_used': state.model_used,
                'response_time': state.decision_time,
                'fallback_mode': state.fallback_mode,
                'cache_hit': state.cache_hit,
                'timestamp': time.time()
            }
            
            # Adicionar ao hist√≥rico
            self.problem_history.append(record)
            
            # Manter apenas os √∫ltimos 1000 registros
            if len(self.problem_history) > 1000:
                self.problem_history = self.problem_history[-1000:]
            
        except Exception as e:
            logging.warning(f"Erro ao atualizar base de conhecimento: {e}")

    def get_performance_report(self) -> Dict:
        """Gera relat√≥rio completo de performance do sistema"""
        metrics = self.performance_metrics
        total_problems = metrics['total_problems']
        
        if total_problems == 0:
            return {
                'status': 'Sistema inicializado - nenhum problema processado ainda',
                'version': 'DREAM V13.2'
            }
        
        # Calcular estat√≠sticas
        success_rate = (metrics['successful_solutions'] / total_problems) * 100
        cache_hit_rate = (metrics['cache_hits'] / total_problems) * 100
        fallback_rate = (metrics['fallback_uses'] / total_problems) * 100
        
        # Estat√≠sticas por modelo
        model_stats = {}
        for model, usage_count in metrics['model_usage'].items():
            if model in self.clients:
                client_stats = self.clients[model].get_stats()
                model_stats[model] = {
                    'usage_count': usage_count,
                    'available': client_stats['available'],
                    'success_rate': client_stats['success_rate']
                }
        
        # Tend√™ncias recentes (√∫ltimos 50 problemas)
        recent_problems = self.problem_history[-50:] if len(self.problem_history) >= 50 else self.problem_history
        recent_success_rate = (sum(1 for p in recent_problems if p['success']) / max(len(recent_problems), 1)) * 100
        
        return {
            'system_overview': {
                'version': 'DREAM V13.2',
                'status': self.system_health,
                'uptime_problems': total_problems,
                'consecutive_failures': self.failure_count
            },
            'performance_metrics': {
                'total_problems_processed': total_problems,
                'successful_solutions': metrics['successful_solutions'],
                'success_rate': f"{success_rate:.1f}%",
                'recent_success_rate': f"{recent_success_rate:.1f}%",
                'average_response_time': f"{metrics['average_response_time']:.2f}s",
                'cache_hit_rate': f"{cache_hit_rate:.1f}%",
                'fallback_usage_rate': f"{fallback_rate:.1f}%"
            },
            'model_statistics': model_stats,
            'capabilities': {
                'code_generations': metrics['code_generations'],
                'available_models': list(self.clients.keys()),
                'default_model': self.default_client_name,
                'cache_enabled': True,
                'cache_size': len(self.cache.cache),
                'supported_intents': [intent.value for intent in IntentType]
            },
            'cache_statistics': self.cache.get_stats(),
            'recent_activity': {
                'last_10_problems': [
                    {
                        'hash': p['problem_hash'],
                        'intent': p['intent'],
                        'success': p['success'],
                        'time': f"{p['response_time']:.2f}s",
                        'model': p['model_used']
                    }
                    for p in self.problem_history[-10:]
                ]
            },
            'system_health': {
                'overall_status': self.system_health,
                'failure_count': self.failure_count,
                'error_rate': f"{(metrics['error_count'] / max(total_problems, 1)) * 100:.1f}%",
                'recommendations': self._generate_health_recommendations()
            }
        }

    def _generate_health_recommendations(self) -> List[str]:
        """Gera recomenda√ß√µes baseadas na sa√∫de do sistema"""
        recommendations = []
        
        success_rate = self._calculate_success_rate()
        
        if success_rate < 70:
            recommendations.append("Taxa de sucesso baixa - verificar conectividade dos modelos")
        
        if self.failure_count > 5:
            recommendations.append("Muitas falhas consecutivas - reiniciar sistema recomendado")
        
        if len(self.clients) < 2:
            recommendations.append("Poucos modelos dispon√≠veis - adicionar mais LLMs para redund√¢ncia")
        
        cache_hit_rate = (self.performance_metrics['cache_hits'] / max(self.performance_metrics['total_problems'], 1)) * 100
        if cache_hit_rate < 10:
            recommendations.append("Taxa de cache baixa - problemas muito √∫nicos ou cache pequeno")
        
        if not recommendations:
            recommendations.append("Sistema operando de forma otimizada")
        
        return recommendations

    def optimize_system(self):
        """Otimiza configura√ß√µes do sistema baseado na performance"""
        try:
            success_rate = self._calculate_success_rate()
            
            # Ajustar tamanho do cache
            if success_rate > 90 and len(self.cache.cache) > 150:
                self.cache.max_size = min(300, self.cache.max_size + 50)
                logging.info(f"Cache expandido para {self.cache.max_size}")
            
            # Ajustar thresholds
            if success_rate > 95:
                self.confidence_threshold = max(0.6, self.confidence_threshold - 0.05)
            elif success_rate < 70:
                self.confidence_threshold = min(0.9, self.confidence_threshold + 0.05)
            
            # Limpar clientes n√£o saud√°veis
            unhealthy_clients = [name for name, client in self.clients.items() if not client.is_healthy()]
            for name in unhealthy_clients:
                logging.warning(f"Removendo cliente n√£o saud√°vel: {name}")
                del self.clients[name]
            
            # Atualizar cliente padr√£o se necess√°rio
            if self.default_client_name not in self.clients:
                self.default_client_name = next(iter(self.clients.keys()), None)
            
            # Reset contador de falhas se sistema est√°vel
            if success_rate > 80:
                self.failure_count = max(0, self.failure_count - 1)
            
            logging.info("Sistema otimizado com sucesso")
            
        except Exception as e:
            logging.error(f"Erro na otimiza√ß√£o: {e}")

    def clear_cache(self):
        """Limpa cache do sistema"""
        self.cache.clear()
        logging.info("Cache do sistema limpo")

    def reset_metrics(self):
        """Reseta m√©tricas de performance"""
        self.performance_metrics = {
            'total_problems': 0,
            'successful_solutions': 0,
            'code_generations': 0,
            'cache_hits': 0,
            'fallback_uses': 0,
            'model_usage': defaultdict(int),
            'average_response_time': 0.0,
            'error_count': 0
        }
        self.problem_history.clear()
        self.failure_count = 0
        self.system_health = 'EXCELLENT'
        logging.info("M√©tricas do sistema resetadas")

# --- UTILIT√ÅRIOS ROBUSTOS ---
def print_enhanced_report(state: CognitiveState):
    """Imprime relat√≥rio aprimorado do processamento"""
    print("\n" + "="*80)
    print("üß† DREAM V13.2 - RELAT√ìRIO DE PROCESSAMENTO COGNITIVO")
    print("="*80)
    
    # Informa√ß√µes principais
    print(f"\nüìù PROBLEMA: {state.problem}")
    print(f"üéØ INTEN√á√ÉO: {state.intent.value}")
    print(f"‚öôÔ∏è ESTRAT√âGIA: {state.strategy.value if state.strategy else 'N/A'}")
    print(f"ü§ñ MODELO: {state.model_used}")
    print(f"üìä RESULTADO: {'‚úÖ SUCESSO' if state.success else '‚ùå FALHA'}")
    print(f"üé≤ CONFIAN√áA: {state.confidence:.2f}")
    print(f"‚è±Ô∏è TEMPO: {state.decision_time:.3f}s")
    
    # Indicadores especiais
    indicators = []
    if state.cache_hit:
        indicators.append("üéØ CACHE HIT")
    if state.fallback_mode:
        indicators.append("üîÑ MODO FALLBACK")
    if state.error:
        indicators.append(f"‚ùå ERRO: {state.error}")
    if state.generated_code:
        indicators.append(f"üíª C√ìDIGO: {len(state.generated_code)} vers√£o(√µes)")
    
    if indicators:
        print(f"\nüè∑Ô∏è INDICADORES: {' | '.join(indicators)}")
    
    # An√°lise de sentimento
    if state.sentiment_analysis:
        sentiment = state.sentiment_analysis
        print(f"\nüé≠ SENTIMENTO:")
        print(f"   ‚Ä¢ Tom: {sentiment.get('tone', 'neutro')}")
        print(f"   ‚Ä¢ Urg√™ncia: {sentiment.get('urgency', 0.0):.1f}")
        print(f"   ‚Ä¢ Complexidade: {sentiment.get('complexity', 0.0):.1f}")
        print(f"   ‚Ä¢ Polidez: {sentiment.get('politeness', 0.0):.1f}")
    
    # Trace de racioc√≠nio
    print(f"\nüß† TRACE DE RACIOC√çNIO:")
    for i, step in enumerate(state.reasoning_trace, 1):
        print(f"  {i:2d}. {step}")
    
    # Insights meta-cognitivos
    if state.meta_insights:
        print(f"\nüîÆ META-INSIGHTS:")
        for insight in state.meta_insights:
            print(f"  ‚Ä¢ {insight}")
    
    # Contexto pragm√°tico (para c√≥digo)
    if state.pragmatic_context and state.intent == IntentType.CODE_GENERATION:
        ctx = state.pragmatic_context
        print(f"\nüîß CONTEXTO T√âCNICO:")
        print(f"   ‚Ä¢ Linguagem: {ctx.get('language', 'N/A')}")
        print(f"   ‚Ä¢ Framework: {ctx.get('framework', 'N/A')}")
        print(f"   ‚Ä¢ Tipo: {ctx.get('project_type', 'N/A')}")
        print(f"   ‚Ä¢ Complexidade: {ctx.get('complexity', 'N/A')}")
        print(f"   ‚Ä¢ Features: {len(ctx.get('features_detected', []))}")
    
    # Execu√ß√£o de c√≥digo (se houver)
    if state.code_execution:
        exec_result = state.code_execution
        print(f"\nüöÄ EXECU√á√ÉO:")
        print(f"   ‚Ä¢ Status: {'‚úÖ Sucesso' if exec_result.success else '‚ùå Falha'}")
        print(f"   ‚Ä¢ Tempo: {exec_result.execution_time:.3f}s")
        print(f"   ‚Ä¢ C√≥digo de retorno: {exec_result.return_code}")
        if exec_result.error:
            print(f"   ‚Ä¢ Observa√ß√µes: {exec_result.error[:100]}...")
    
    # Solu√ß√£o (truncada se muito longa)
    if state.solution:
        print(f"\nüí° SOLU√á√ÉO GERADA:")
        print("-" * 40)
        solution_preview = state.solution[:1000] + "..." if len(state.solution) > 1000 else state.solution
        print(solution_preview)
        if len(state.solution) > 1000:
            print(f"\n[Solu√ß√£o truncada - {len(state.solution)} caracteres totais]")
        print("-" * 40)
    
    print("\n" + "="*80)

def print_system_status(system: DreamSystemV13_2):
    """Imprime status detalhado do sistema"""
    print("\n" + "="*70)
    print("üè• STATUS DETALHADO DO SISTEMA DREAM V13.2")
    print("="*70)
    
    # Sa√∫de geral
    health_icons = {
        'EXCELLENT': 'üíö',
        'GOOD': 'üíõ',
        'DEGRADED': 'üß°',
        'CRITICAL': '‚ù§Ô∏è'
    }
    
    print(f"\n{health_icons.get(system.system_health, '‚ùì')} SA√öDE GERAL: {system.system_health}")
    print(f"üìä TAXA DE SUCESSO: {system._calculate_success_rate():.1f}%")
    print(f"üîÑ FALHAS CONSECUTIVAS: {system.failure_count}")
    
    # Modelos LLM
    print(f"\nü§ñ MODELOS DISPON√çVEIS:")
    for name, client in system.clients.items():
        status = "‚úÖ Saud√°vel" if client.is_healthy() else "‚ö†Ô∏è Problem√°tico"
        default_mark = " [PADR√ÉO]" if name == system.default_client_name else ""
        stats = client.get_stats()
        print(f"   ‚Ä¢ {name}{default_mark}: {status} | Req: {stats['request_count']} | Taxa: {stats['success_rate']:.1f}%")
    
    # Cache
    cache_stats = system.cache.get_stats()
    print(f"\nüíæ CACHE:")
    print(f"   ‚Ä¢ Tamanho: {cache_stats['size']}/{cache_stats['max_size']}")
    print(f"   ‚Ä¢ Taxa de acerto: {cache_stats['hit_rate']}")
    print(f"   ‚Ä¢ Total de requisi√ß√µes: {cache_stats['total_requests']}")
    
    # M√©tricas principais
    metrics = system.performance_metrics
    print(f"\nüìà M√âTRICAS:")
    print(f"   ‚Ä¢ Problemas processados: {metrics['total_problems']}")
    print(f"   ‚Ä¢ Solu√ß√µes bem-sucedidas: {metrics['successful_solutions']}")
    print(f"   ‚Ä¢ C√≥digos gerados: {metrics['code_generations']}")
    print(f"   ‚Ä¢ Cache hits: {metrics['cache_hits']}")
    print(f"   ‚Ä¢ Fallbacks usados: {metrics['fallback_uses']}")
    print(f"   ‚Ä¢ Tempo m√©dio de resposta: {metrics['average_response_time']:.2f}s")
    
    # Hist√≥rico recente
    if system.problem_history:
        recent = system.problem_history[-5:]
        print(f"\nüìã ATIVIDADE RECENTE:")
        for i, record in enumerate(recent, 1):
            status_icon = "‚úÖ" if record['success'] else "‚ùå"
            print(f"   {i}. {status_icon} {record['intent']} | {record['model_used']} | {record['response_time']:.2f}s")
    
    print("\n" + "="*70)

def run_interactive_session(system: DreamSystemV13_2):
    """Executa sess√£o interativa com o sistema"""
    print("\nüöÄ SESS√ÉO INTERATIVA DREAM V13.2 INICIADA")
    print("="*50)
    print("Comandos especiais:")
    print("  ‚Ä¢ 'report' - Relat√≥rio de performance")
    print("  ‚Ä¢ 'status' - Status do sistema")
    print("  ‚Ä¢ 'models' - Listar modelos dispon√≠veis")
    print("  ‚Ä¢ 'cache clear' - Limpar cache")
    print("  ‚Ä¢ 'optimize' - Otimizar sistema")
    print("  ‚Ä¢ 'help' - Mostrar ajuda")
    print("  ‚Ä¢ 'exit' - Sair")
    print("="*50)
    
    while True:
        try:
            user_input = input("\nüß† DREAM> ").strip()
            
            if not user_input:
                continue
            
            cmd = user_input.lower()
            
            # Comandos de controle
            if cmd in ['exit', 'quit', 'sair']:
                print("\nüëã Encerrando sess√£o...")
                break
            
            elif cmd == 'report':
                report = system.get_performance_report()
                print("\nüìä RELAT√ìRIO DE PERFORMANCE:")
                print(json.dumps(report, indent=2, ensure_ascii=False))
            
            elif cmd == 'status':
                print_system_status(system)
            
            elif cmd == 'models':
                print(f"\nü§ñ MODELOS DISPON√çVEIS:")
                for name, client in system.clients.items():
                    health = "‚úÖ" if client.is_healthy() else "‚ùå"
                    default = " [PADR√ÉO]" if name == system.default_client_name else ""
                    print(f"   ‚Ä¢ {name}{default}: {health}")
            
            elif cmd == 'cache clear':
                system.clear_cache()
                print("‚úÖ Cache limpo")
            
            elif cmd == 'optimize':
                system.optimize_system()
                print("‚úÖ Sistema otimizado")
            
            elif cmd == 'help':
                print("""
üß† DREAM V13.2 - SISTEMA AGI MULTI-LLM

üìã FUNCIONALIDADES PRINCIPAIS:
‚Ä¢ Gera√ß√£o de c√≥digo inteligente (HTML, Python, JavaScript)
‚Ä¢ Resolu√ß√£o de charadas e problemas de l√≥gica
‚Ä¢ Consultas factuais e acad√™micas
‚Ä¢ Planejamento estrat√©gico
‚Ä¢ S√≠ntese de informa√ß√µes complexas
‚Ä¢ Debates adversariais para verifica√ß√£o

üí° EXEMPLOS DE USO:
‚Ä¢ "Crie uma calculadora em Python"
‚Ä¢ "Fa√ßa uma anima√ß√£o de pent√°gono com bola"
‚Ä¢ "O que pesa mais: 1kg de ferro ou 1kg de algod√£o?"
‚Ä¢ "Explique a teoria da relatividade"
‚Ä¢ "Crie um plano para aprender programa√ß√£o"

üîß COMANDOS DO SISTEMA:
‚Ä¢ report - M√©tricas detalhadas
‚Ä¢ status - Sa√∫de do sistema
‚Ä¢ models - Modelos dispon√≠veis
‚Ä¢ optimize - Otimizar performance
""")
            
            elif cmd.startswith('use '):
                # Comando para usar modelo espec√≠fico
                model_name = cmd[4:].strip()
                if model_name in system.clients:
                    print(f"üéØ Usando modelo: {model_name}")
                    problem = input("Digite sua pergunta: ").strip()
                    if problem:
                        result = system.solve_problem(problem, model_name=model_name)
                        print_enhanced_report(result)
                else:
                    print(f"‚ùå Modelo '{model_name}' n√£o dispon√≠vel")
            
            else:
                # Processar problema normal
                print(f"\nüîÑ Processando: {user_input}")
                result = system.solve_problem(user_input)
                print_enhanced_report(result)
                
                # Otimiza√ß√£o autom√°tica peri√≥dica
                if system.performance_metrics['total_problems'] % 20 == 0:
                    system.optimize_system()
                    print("üîß Sistema auto-otimizado")
        
        except KeyboardInterrupt:
            print("\n\nüõë Sess√£o interrompida pelo usu√°rio")
            break
        
        except Exception as e:
            print(f"\n‚ùå Erro na sess√£o interativa: {e}")
            logging.error(f"Erro na sess√£o: {e}", exc_info=True)

# --- MAIN ROBUSTO ---
def main():
    """Fun√ß√£o principal robusta"""
    print("="*80)
    print("üß† DREAM V13.2 - SISTEMA AGI MULTI-LLM UNIFICADO")
    print("="*80)
    print("üöÄ Sistema robusto com Ollama + OpenAI")
    print("‚ö° Gera√ß√£o de c√≥digo inteligente e an√°lise avan√ßada")
    print("üîß Fallbacks autom√°ticos e recupera√ß√£o de erros")
    print("üíæ Cache inteligente e otimiza√ß√£o autom√°tica")
    print("-"*80)
    
    try:
        # Inicializar sistema
        print("\nüîÑ Inicializando DREAM V13.2...")
        system = DreamSystemV13_2(enable_cache_persistence=True)
        
        print(f"\n‚úÖ Sistema inicializado com sucesso!")
        print(f"üéØ Modelo padr√£o: {system.default_client_name}")
        print(f"ü§ñ Modelos dispon√≠veis: {len(system.clients)}")
        print(f"üíæ Cache: Ativo")
        print(f"üè• Sa√∫de: {system.system_health}")
        
        # Executar sess√£o interativa
        run_interactive_session(system)
        
        # Relat√≥rio final
        final_stats = system.get_performance_report()
        print(f"\nüìä ESTAT√çSTICAS DA SESS√ÉO:")
        print(f"   ‚Ä¢ Problemas processados: {final_stats['performance_metrics']['total_problems_processed']}")
        print(f"   ‚Ä¢ Taxa de sucesso: {final_stats['performance_metrics']['success_rate']}")
        print(f"   ‚Ä¢ C√≥digos gerados: {final_stats['capabilities']['code_generations']}")
        print(f"   ‚Ä¢ Cache hits: {final_stats['cache_statistics']['hits']}")
        
    except Exception as e:
        print(f"\n‚ùå Erro fatal na inicializa√ß√£o: {e}")
        logging.error(f"Erro fatal: {e}", exc_info=True)
        print("\nüîß VERIFICA√á√ïES SUGERIDAS:")
        print("   ‚Ä¢ Ollama est√° instalado e rodando?")
        print("   ‚Ä¢ Modelo gemma3 est√° dispon√≠vel?")
        print("   ‚Ä¢ OPENAI_API_KEY est√° configurada?")
        print("   ‚Ä¢ Depend√™ncias Python est√£o instaladas?")
        print("   ‚Ä¢ Permiss√µes de arquivo est√£o corretas?")
        
        # Tentar diagn√≥stico b√°sico
        print(f"\nüîç DIAGN√ìSTICO B√ÅSICO:")
        print(f"   ‚Ä¢ Ollama dispon√≠vel: {OLLAMA_AVAILABLE}")
        print(f"   ‚Ä¢ OpenAI dispon√≠vel: {OPENAI_AVAILABLE}")
        if OPENAI_AVAILABLE:
            print(f"   ‚Ä¢ API Key configurada: {'‚úÖ' if OPENAI_API_KEY else '‚ùå'}")
    
    print("\n" + "="*80)
    print("üß† Obrigado por usar o DREAM V13.2!")
    print("   Sistema AGI Multi-LLM Unificado")
    print("   Vers√£o Robusta e Completa")
    print("="*80)

if __name__ == "__main__":
    main()